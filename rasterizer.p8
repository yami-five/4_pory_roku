pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
tex='677765677656777677776566665677777777655ee55677777776555ee55567776665555ee55556665555555665555555665555677655556676eee6e77e6eee6776eee6eeee6eee676655556ee655556655555556655555556665555ee55556667776555ee55567777777655ee556777777776566665677776777656776567776'
chicken_tex='5555555555555555555555555555555555555555555555545555335555555b5555554455555544545533b5555555545555555455555554445353b5555545595555555333333b554533b5555555555a55555535b55555b553555b55b5555454555553b5b5555b5b3bb5b55555555454555535b55b5bb5bb5b5bb5b55555554555553555555b55555555555555555545555355555555555b555555b555559544555355555555bbb55555bbb555554554553555555b55555bb5555553b5554454553b555b55555555b555b3533b554455553bbb555b5bbbb3555555b353b5445555b555b55555555bbb55bbb5b3b5444555b55555355b5555bb55535b5b33555555bb555555b5b555b5555b5353b3b55555355555d55555555555bbb53533554a55355555555555555555b33bb53bb544553555b555555555555b335b3535555b5535555b5bb55555555bb5b3533bb545553555b55555b5555555b553b5bbb545553355555555555555555b555bbb5555555222555555555555b555555555555555544455555555555555555555555555555555555555555b55555555555b5b5555555b4e55565d555555555555555555555555bb55d55d65d5555444445555555555552b5dd56ddd55555444444454555555552255655d6d5555554444545455555555524225ddd555555555555555555555555555555555555555555555555555'
-- t=0
-- function _init()
--     -- pal(2,8,1)
--     -- pal(3,5,1)
--     -- pal(4,9,1)
--     -- pal(5,6,1)
--     -- pal(11,134,1)
--     -- pal(14,130,1)
--     -- pal(split("0,129,128,132,132,128,5,129,136,137,137,11,1,137,4,132"),2)
--     -- poke(0x5f5f,0x10)
-- 	-- for i=0,4 do
-- 	-- 	poke(0x5f7b+i,0xff)
-- 	-- end
--     tex=zoom_rotator_texture()
-- end
function zoom_rotator_texture()
    local texture=""
    for i=0,0x2000,1 do
        texture=texture..sub(tostr(@i,true),5,6)
    end
    return texture
end

function texturing(x,yp2y,inv,p0,p1,p2,uv0,uv1,uv2,tex_size,texture,fac,tsts)
    local Ba,Bb=((p1[2]-p2[2])*(x*2+fac-p2[1])+(p2[1]-p1[1])*yp2y)*inv,((p2[2]-p0[2])*(x*2+fac-p2[1])+(p0[1]-p2[1])*yp2y)*inv
    local Bc=1-Ba-Bb
    local uv_x,uv_y=Ba*uv0[1]+Bb*uv1[1]+Bc*uv2[1],Ba*uv0[2]+Bb*uv1[2]+Bc*uv2[2]
    uv_x = max(0, min(1, uv_x))
    uv_x=flr(uv_x*tex_size+0.5)+1
    uv_y = max(0, min(1, uv_y))
    uv_y=flr(uv_y*tex_size+0.5)+1
    return texture[max(0, min(tsts, flr(uv_y *tex_size + uv_x+0.5)))]
end

function rasterize(y, x0, x1, uv0, uv1, uv2, inv,p0,p1,p2,l_int,tex_size,texture,fast,tsts)
    if (y<0 or y>127) return
    local q,n
    local yp2y=y-p2[2]
    n=(flr(y)%2+0.5)*0.5
    x0+=n;
    x1+=n;
    if (x1<x0) q=x0 x0=x1 x1=q
    if (x1<0 or x0>127) return
    y=flr(y+0.5);
    if (x0<0) x0=0
    if (x1>123) x1=123
    x0,x1=flr(x0/2+0.5),flr(x1/2+0.5)
    for x = x0, x1, 1 do
        local color="0x11"
        if(l_int>0.3)then
            local texture_color1 = texturing(x,yp2y,inv,p0,p1,p2,uv0,uv1,uv2,tex_size,texture,0,tsts)
            if(l_int>0.97)then color="0xa"..texture_color1
            elseif(l_int<=0.97 and l_int>0.5)then
                if (fast!=true) then color="0x"..texture_color1..texturing(x,y,inv,p0,p1,p2,uv0,uv1,uv2,tex_size,texture,-2,tsts) end
                color="0x"..texture_color1..texture_color1
            elseif(l_int<=0.5)then color="0x1"..texture_color1
            end
        end
        poke(0x6000 + y * 0x40 + x, color)
    end
end
    
function tri(x0,y0,x1,y1,x2,y2,uv0,uv1,uv2,l_int,tex_size,texture,fast,tsts)
    local x,xx,y,q,q2,uv;
    if (y0>y1) y=y0;y0=y1;y1=y;x=x0;x0=x1;x1=x;uv=uv0;uv0=uv1;uv1=uv;
    if (y0>y2) y=y0;y0=y2;y2=y;x=x0;x0=x2;x2=x;uv=uv0;uv0=uv2;uv2=uv;
    if (y1>y2) y=y1;y1=y2;y2=y;x=x1;x1=x2;x2=x;uv=uv1;uv1=uv2;uv2=uv;
    local dx01,dy01,dx02,dy02;
    local xd,xxd;
    if (y2<0 or y0>127) return
    y,x,xx=y0,x0,x0;
    dx01,dy01,dy02,dx02,dx12,dy12,q2,xxd=x1-x0,y1-y0,y2-y0,x2-x0,x2-x1,y2-y1,0,1;
    if(x2<x0) xxd=-1
    inv=1/((y1-y2)*(x0-x2)+(x2-x1)*(y0-y2))
    if flr(y0)<flr(y1) then
        q,xd=0,1;
        if(x1<x0) xd=-1
        while y<=y1 do
            rasterize(y,x,xx,uv0,uv1,uv2,inv,{x0,y0},{x1,y1},{x2,y2},l_int,tex_size,texture,fast,tsts);
            y+=1;
            q+=dx01;
            q2+=dx02;
            while xd*q>=dy01 do
                q-=xd*dy01
                x+=xd
            end
            while xxd*q2>=dy02 do
                q2-=xxd*dy02
                xx+=xxd
            end
        end
    end
    
    if flr(y1)<flr(y2) then
        q,x,xd=0,x1,1;
        if (x2<x1) xd=-1
        while y<=y2 and y<128 do
            rasterize(y,x,xx,uv0,uv1,uv2,inv,{x0,y0},{x1,y1},{x2,y2},l_int,tex_size,texture,fast,tsts);
            y+=1;
            q+=dx12;
            q2+=dx02;
            while xd*q>dy12 do
                q-=xd*dy12
                x+=xd
            end
            while xxd*q2>dy02 do
                q2-=xxd*dy02
                xx+=xxd
            end
        end
    end
end
    
function tric(a,b,c,d,e,f,uv0,uv1,uv2,l_int,tex_size,texture,fast,tsts)
    local e1x,e1y,e2x,e2y=c-a,d-b,e-a,f-b;
    if (e1x*e2y-e1y*e2x<0) return;
    return tri(a,b,c,d,e,f,uv0,uv1,uv2,l_int,tex_size,texture,fast,tsts);
end
    
    
function rotate(x,y,a)
    local c,s=cos(a),sin(a)
    return c*x-s*y, s*x+c*y
end

-- function rotate2(x,y,a)
--     local xP=2 yP=1 
--     local c=cos(a) s=sin(a)
--     return c*(x-xP)-s*(y-yP)+xP, s*(x-xP)+c*(y-yP)+yP
-- end

-- function translation(x,y,z,xT,yT,zT)
--     return x+xT,y+yT,z+zT
-- end

function draw_model(p,qt,vertices,vt,vm,faces,f,tc,uv,textures,calc_light,tex_size,fast,tsts)
    for i=1,3*faces,3 do
        local a,b,c,xab,yab,zab,xac,yac,zac,nv,l_dir,l_cos,l_int;
        a,b,c,l_int=f[i],f[i+1],f[i+2],0.9;
        if(calc_light==true) then
            -- flat shading
            -- normal vector
            xab,yab,zab,xac,yac,zac=vm[b*3+1]-vm[a*3+1],vm[b*3+2]-vm[a*3+2],vm[b*3+3]-vm[a*3+3],vm[c*3+1]-vm[a*3+1],vm[c*3+2]-vm[a*3+2],vm[c*3+3]-vm[a*3+3]
            nv={yab*zac-zab*yac,zab*xac-xab*zac,xab*yac-yab*xac}
            vec_len=v3_len({nv[1],nv[2],nv[3]})
            nv[1],nv[2],nv[3]=nv[1]/vec_len,nv[2]/vec_len,nv[3]/vec_len
            nv_len=v3_len(nv)
            -- light direction
            local tx,ty,tz=(vm[a*3+1]+vm[b*3+1]+vm[c*3+1])/3,(vm[a*3+2]+vm[b*3+2]+vm[c*3+2])/3,(vm[a*3+3]+vm[b*3+3]+vm[c*3+3])/3
            l_dir={50-tx,50-ty,50-tz}
            l_len=v3_len(l_dir)
            -- cos
            l_dir_nv=v3_len({l_dir[1]-nv[1],l_dir[2]-nv[2],l_dir[3]-nv[3]})
            x=nv_len*nv_len+l_len*l_len-l_dir_nv*l_dir_nv
            y=l_len*nv_len*2
            l_cos=x/y
            l_int=max(0.1,l_cos)
        end
        local tex_i=1
        if #textures==6 then tex_i=flr(i/3)%6+1 end
        tric(
            vt[a*3+1],
            vt[a*3+2],
            vt[b*3+1],
            vt[b*3+2],
            vt[c*3+1],
            vt[c*3+2],
            {tc[uv[i]*2+1],tc[uv[i]*2+2]},{tc[uv[i+1]*2+1],tc[uv[i+1]*2+2]},{tc[uv[i+2]*2+1],tc[uv[i+2]*2+2]},l_int,tex_size,textures[tex_i],fast,tsts)
    end
end
function draw_cube(p)
	local qt,vertices,faces,vt,vm=t*0.01,8,12,{},{}
	local v=split("0.35,0.35,-0.35,0.35,-0.35,-0.35,0.35,0.35,0.35,0.35,-0.35,0.35,-0.35,0.35,-0.35,-0.35,-0.35,-0.35,-0.35,0.35,0.35,-0.35,-0.35,0.35")
	local f=split("0,2,4,3,7,2,7,5,6,5,7,1,1,3,0,5,1,4,2,6,4,7,6,2,5,4,6,7,3,1,3,2,0,1,0,4")
    local tc=split("1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0")
    local uv=split("2,1,0,2,1,0,1,3,2,0,2,3,2,1,0,1,3,2,1,3,0,1,3,0,3,0,2,2,1,3,1,3,0,3,0,2")
    for j=1,vertices*3,3 do
        local x,y,z=v[j],v[j+1],v[j+2];
        y,z=rotate(y,z,qt);
        x,z=rotate(x,z,qt*1.5);
        x,y=inf(qt+p,x,y)
        y-=1
        add(vm,x);
        add(vm,y);
        add(vm,z);
        z=z+5;
        x=x*96/z+64;
        y=y*96/z+64;
        vt[j],vt[j+1],vt[j+1]=flr(x),flr(y),flr(z);
    end
    draw_model(p,qt,vertices,vt,vm,faces,f,tc,uv,{tex},true,16,false,256)
end

function draw_torus(p)
	local qt,vertices,order,rings,faces,vt,vm=t*0.01,12,{},8,12,{},{}
	local v=split("-0.0,0.0,1.02,-0.0,0.24,0.88,-0.0,0.24,0.61,-0.0,0.0,0.47,-0.0,-0.24,0.61,-0.0,-0.24,0.88,0.72,0.0,0.72,0.62,0.24,0.62,0.43,0.24,0.43,0.33,0.0,0.33,0.43,-0.24,0.43,0.62,-0.24,0.62,-0.72,0.0,0.72,-0.62,0.24,0.62,-0.43,0.24,0.43,-0.33,0.0,0.33,-0.43,-0.24,0.43,-0.62,-0.24,0.62,-0.0,0.0,1.02,-0.0,0.24,0.88,-0.0,0.24,0.61,-0.0,0.0,0.47,-0.0,-0.24,0.61,-0.0,-0.24,0.88,-1.02,0.0,-0.0,-0.88,0.24,-0.0,-0.61,0.24,-0.0,-0.47,0.0,-0.0,-0.61,-0.24,-0.0,-0.88,-0.24,-0.0,-0.72,0.0,0.72,-0.62,0.24,0.62,-0.43,0.24,0.43,-0.33,0.0,0.33,-0.43,-0.24,0.43,-0.62,-0.24,0.62,-0.72,0.0,-0.72,-0.62,0.24,-0.62,-0.43,0.24,-0.43,-0.33,0.0,-0.33,-0.43,-0.24,-0.43,-0.62,-0.24,-0.62,-1.02,0.0,-0.0,-0.88,0.24,-0.0,-0.61,0.24,-0.0,-0.47,0.0,-0.0,-0.61,-0.24,-0.0,-0.88,-0.24,-0.0,0.0,0.0,-1.02,0.0,0.24,-0.88,0.0,0.24,-0.61,0.0,0.0,-0.47,0.0,-0.24,-0.61,0.0,-0.24,-0.88,-0.72,0.0,-0.72,-0.62,0.24,-0.62,-0.43,0.24,-0.43,-0.33,0.0,-0.33,-0.43,-0.24,-0.43,-0.62,-0.24,-0.62,0.72,0.0,-0.72,0.62,0.24,-0.62,0.43,0.24,-0.43,0.33,0.0,-0.33,0.43,-0.24,-0.43,0.62,-0.24,-0.62,0.0,0.0,-1.02,0.0,0.24,-0.88,0.0,0.24,-0.61,0.0,0.0,-0.47,0.0,-0.24,-0.61,0.0,-0.24,-0.88,1.02,0.0,0.0,0.88,0.24,0.0,0.61,0.24,0.0,0.47,0.0,0.0,0.61,-0.24,0.0,0.88,-0.24,0.0,0.72,0.0,-0.72,0.62,0.24,-0.62,0.43,0.24,-0.43,0.33,0.0,-0.33,0.43,-0.24,-0.43,0.62,-0.24,-0.62,0.72,0.0,0.72,0.62,0.24,0.62,0.43,0.24,0.43,0.33,0.0,0.33,0.43,-0.24,0.43,0.62,-0.24,0.62,1.02,0.0,0.0,0.88,0.24,0.0,0.61,0.24,0.0,0.47,0.0,0.0,0.61,-0.24,0.0,0.88,-0.24,0.0")
    for i=1,rings,1 do
        for j=1+vertices*3*(i-1),vertices*3*i,3 do
            local x,y,z=v[j],v[j+1],v[j+2];
            y,z=rotate(y,z,qt*0.9);
            x,z=rotate(x,z,qt*0.3);
            x,y=inf(qt+p,x,y)
            y-=1
            add(vm,x);
            add(vm,y);
            add(vm,z);
            z=z+5;
            x=x*96/z+64;
            y=y*96/z+64;
            vt[j],vt[j+1],vt[j+2]=flr(x),flr(y),flr(z);
        end
    end
    for i=1,rings,1 do
        local x,y,z=0,0,0
        for j=1,vertices*3,3 do
            x+=vm[j*i]
            y+=vm[(j+1)*i]
            z+=vm[(j+2)*i]
        end
        x/=vertices
        y/=vertices
        z/=vertices
        add(order,i)
        add(order,flr(sqrt((0-x)*(0-x)+(0-y)*(0-y)+(-10-z)*(-10-z))*1000))
    end
    order=sort(order)
	local f=split("0,1,6,1,2,7,2,3,8,4,10,3,4,5,10,0,6,5,1,7,6,2,8,7,3,9,8,10,9,3,5,11,10,6,11,5")
    local tc=split("0.0,0.5,1.0,0.33,1.0,0.5,-0.0,0.33,1.0,0.17,-0.0,0.17,1.0,0.0,1.0,1.0,0.0,0.83,1.0,0.83,1.0,0.67,-0.0,0.0,0.0,1.0,0.0,0.67")
    local uv=split("2,1,0,1,4,3,4,6,5,9,8,7,9,10,8,2,0,10,1,3,0,4,5,3,6,11,5,8,12,7,10,13,8,0,13,10")
    for i=1,rings*2,2 do
        local v_r={}
        local vm_r={}
        for j=1+vertices*3*(order[i]-1),vertices*3*order[i] do
            add(v_r,vt[j])
            add(vm_r,vm[j])
        end
	    draw_model(p,qt,vertices,v_r,vm_r,faces,f,tc,uv,{tex},true,16,false,256)
    end
end

function zoom_rotator(p)
	local qt,vertices,planes,faces,zm=t*0.01,4,25,2,22-11*sin(t%10*0.1)
	local v=split("-5.0,5.0,-0.0,5.0,5.0,-0.0,-5.0,-5.0,0.0,5.0,-5.0,0.0,5.0,5.0,-0.0,15.0,5.0,-0.0,5.0,-5.0,0.0,15.0,-5.0,0.0,-5.0,15.0,-0.0,5.0,15.0,-0.0,-5.0,5.0,-0.0,5.0,5.0,-0.0,5.0,15.0,-0.0,15.0,15.0,-0.0,5.0,5.0,-0.0,15.0,5.0,-0.0,-5.0,-5.0,0.0,5.0,-5.0,0.0,-5.0,-15.0,0.0,5.0,-15.0,0.0,5.0,-5.0,0.0,15.0,-5.0,0.0,5.0,-15.0,0.0,15.0,-15.0,0.0,-15.0,5.0,-0.0,-5.0,5.0,-0.0,-15.0,-5.0,0.0,-5.0,-5.0,0.0,-15.0,15.0,-0.0,-5.0,15.0,-0.0,-15.0,5.0,-0.0,-5.0,5.0,-0.0,-15.0,-5.0,0.0,-5.0,-5.0,0.0,-15.0,-15.0,0.0,-5.0,-15.0,0.0,-25.0,5.0,-0.0,-15.0,5.0,-0.0,-25.0,-5.0,0.0,-15.0,-5.0,0.0,-25.0,15.0,-0.0,-15.0,15.0,-0.0,-25.0,5.0,-0.0,-15.0,5.0,-0.0,-25.0,-5.0,0.0,-15.0,-5.0,0.0,-25.0,-15.0,0.0,-15.0,-15.0,0.0,-25.0,25.0,-0.0,-15.0,25.0,-0.0,-25.0,15.0,-0.0,-15.0,15.0,-0.0,-25.0,-15.0,0.0,-15.0,-15.0,0.0,-25.0,-25.0,0.0,-15.0,-25.0,0.0,15.0,5.0,-0.0,25.0,5.0,-0.0,15.0,-5.0,0.0,25.0,-5.0,0.0,15.0,15.0,-0.0,25.0,15.0,-0.0,15.0,5.0,-0.0,25.0,5.0,-0.0,15.0,-5.0,0.0,25.0,-5.0,0.0,15.0,-15.0,0.0,25.0,-15.0,0.0,15.0,25.0,-0.0,25.0,25.0,-0.0,15.0,15.0,-0.0,25.0,15.0,-0.0,15.0,-15.0,0.0,25.0,-15.0,0.0,15.0,-25.0,0.0,25.0,-25.0,0.0,-5.0,25.0,-0.0,5.0,25.0,-0.0,-5.0,15.0,-0.0,5.0,15.0,-0.0,5.0,25.0,-0.0,15.0,25.0,-0.0,5.0,15.0,-0.0,15.0,15.0,-0.0,-15.0,25.0,-0.0,-5.0,25.0,-0.0,-15.0,15.0,-0.0,-5.0,15.0,-0.0,-5.0,-15.0,0.0,5.0,-15.0,0.0,-5.0,-25.0,0.0,5.0,-25.0,0.0,5.0,-15.0,0.0,15.0,-15.0,0.0,5.0,-25.0,0.0,15.0,-25.0,0.0,-15.0,-15.0,0.0,-5.0,-15.0,0.0,-15.0,-25.0,0.0,-5.0,-25.0,0.0")
    local f,tc,uv=split("0,2,1,2,3,1"),split("1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0"),split("2,1,0,1,3,0")
    for i=1,planes,1 do
        -- printh("-----"..i.."------","loggg.txt")
        local v_r=""
        for j=1+vertices*3*(i-1),vertices*3*i,3 do
            local x,y,z=v[j],v[j+1],v[j+2];
            z-=zm
            -- z+=sin(t*0.005)
            -- z-=11 -- max zoom
            -- z-=33 -- min zoom
            x,y=rotate(x,y,qt);
            z+=5;
            x=x*96/z+64;
            y=y*96/z+64;
            v_r=v_r..flr(x+0.5)..","..flr(y+0.5)..","..flr(z+0.5)..","
            -- printh(x.." "..y.." "..z,"loggg.txt")
        end
        v_r=split(sub(v_r,1,-2))
        local xc,yc=64-(v_r[1]+v_r[4]+v_r[7]+v_r[10])/4,64-(v_r[2]+v_r[5]+v_r[8]+v_r[11])/4
        -- printh("dis="..flr(sqrt(xc*xc+yc*yc)),"loggg.txt")
        if((xc*xc+yc*yc)<22000)then
    	    draw_model(p,qt,vertices,v_r,v_r,faces,f,tc,uv,{tex},false,128,true,16384) 
        end
    end
end

function draw_cube_anim(p)
    local textures,qt,vertices,faces,vt,vm=draw_plasmas(),t*0.01,8,12,"",""
	local v=split("1.3,1.3,-1.3,1.3,-1.3,-1.3,1.3,1.3,1.3,1.3,-1.3,1.3,-1.3,1.3,-1.3,-1.3,-1.3,-1.3,-1.3,1.3,1.3,-1.3,-1.3,1.3")
	local f=split("0,2,4,3,7,2,7,5,6,5,7,1,1,3,0,5,1,4,2,6,4,7,6,2,5,4,6,7,3,1,3,2,0,1,0,4")
    local tc=split("1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0")
    local uv=split("2,1,0,2,1,0,1,3,2,0,2,3,2,1,0,1,3,2,1,3,0,1,3,0,3,0,2,2,1,3,1,3,0,3,0,2")
    for j=1,vertices*3,3 do
        local x,y,z=v[j],v[j+1],v[j+2];
        y,z=rotate(y,z,qt);
        x,z=rotate(x,z,qt*1.5);
        -- x,y=inf(qt+p,x,y)
        -- y-=1
        vm=vm..x..","..y..","..z..","
        z=z+5;
        x=x*96/z+64;
        y=y*96/z+64;
        vt=vt..x..","..y..","..z..","
    end
    vm,vt=split(sub(vm,1,-2)),split(sub(vt,1,-2))
    draw_model(p,qt,vertices,vt,vm,faces,f,tc,uv,textures,true,32,false,1024)
end

function v3_len(vec)
    return sqrt(vec[1]*vec[1]+vec[2]*vec[2]+vec[3]*vec[3])        
end

function inf(t,x,y)
	x+=2*(cos(t))
	y+=2*cos(t)*sin(t)
    return x,y
end

function background()
    spr(0,0,0,16,16)
end

function mirror()
    for i=0,40,1 do
        for j=0,64,1 do
            poke(0x7fc0-i*64+j,@(0x6000+i*128+j+448))
        end
    end
end

-- t=0
-- function _update()
--     t+=1
-- end

-- function _draw()
--     cls()
--     -- bridge2()
--     -- spr(0,0,0,16,16)
--     zoom_rotator(0)
--     -- draw_cube_anim()
--     -- draw_chicken()
--     -- mirror()
--     -- print(stat(9))
-- end

function draw_chicken(p)
	local qt,vertices,faces,vt,vm,order=t*0.01,split("5,20,27,14,21,21"),split("4,28,36,20,36,36"),{},{},""
	local v={split("-0.82,1.89,0.0,-1.18,1.89,0.0,-0.81,2.11,0.0,-0.74,1.89,0.14,-0.74,1.89,-0.14")
            ,split("-0.38,2.73,0.0,-0.72,2.44,0.0,-0.04,2.82,0.0,0.35,2.57,0.0,-0.42,2.47,0.42,-0.09,2.54,0.51,0.24,2.57,0.29,0.46,1.76,0.54,-0.48,1.86,0.54,0.04,1.84,0.68,0.52,2.08,0.0,-0.81,2.11,0.0,-0.74,1.89,0.14,-0.42,2.47,-0.42,-0.09,2.54,-0.51,0.24,2.57,-0.29,0.46,1.76,-0.54,-0.48,1.86,-0.54,0.04,1.84,-0.68,-0.74,1.89,-0.14")
            ,split("-1.12,1.07,0.0,-0.66,0.96,0.71,0.15,0.82,0.99,-0.54,-0.81,0.0,-1.17,0.03,0.0,0.03,-1.0,0.0,-0.59,-0.22,0.8,0.03,-0.5,1.09,0.76,1.35,0.0,0.91,0.55,1.01,1.13,-0.33,0.9,0.46,1.76,0.54,-0.82,1.89,0.0,-0.48,1.86,0.54,0.04,1.84,0.68,0.52,2.08,0.0,-0.74,1.89,0.14,-0.66,0.96,-0.71,0.15,0.82,-0.99,-0.59,-0.22,-0.8,0.03,-0.5,-1.09,0.91,0.55,-1.01,1.13,-0.33,-0.9,0.46,1.76,-0.54,-0.48,1.86,-0.54,0.04,1.84,-0.68,-0.74,1.89,-0.14")
            ,split("0.76,1.35,0.0,1.82,1.0,0.0,2.26,0.51,0.0,0.91,0.55,1.01,1.82,0.51,0.57,1.41,-0.65,0.0,1.13,-0.33,0.9,2.23,1.31,0.0,1.98,-0.11,0.0,1.59,0.04,0.69,0.91,0.55,-1.01,1.82,0.51,-0.57,1.13,-0.33,-0.9,1.59,0.04,-0.69")
            ,split("0.03,-1.0,0.0,1.41,-0.65,0.0,0.03,-0.5,-1.09,1.13,-0.33,-0.9,0.77,-1.55,-0.56,0.77,-1.55,-0.75,0.96,-1.55,-0.56,0.96,-1.55,-0.75,0.77,-1.99,-0.51,0.77,-1.99,-0.8,0.96,-1.99,-0.56,0.96,-1.99,-0.75,0.77,-1.86,-0.56,0.96,-1.86,-0.56,0.77,-1.86,-0.75,0.96,-1.86,-0.75,0.77,-1.99,-0.66,0.96,-1.86,-0.66,0.07,-1.99,-0.47,0.07,-1.99,-0.84,1.26,-1.99,-0.66")
            ,split("0.03,-1.0,0.0,0.03,-0.5,1.09,1.41,-0.65,0.0,1.13,-0.33,0.9,0.77,-1.55,0.56,0.77,-1.55,0.75,0.96,-1.55,0.56,0.96,-1.55,0.75,0.77,-1.99,0.51,0.77,-1.99,0.8,0.96,-1.99,0.56,0.96,-1.99,0.75,0.77,-1.86,0.56,0.96,-1.86,0.56,0.77,-1.86,0.75,0.96,-1.86,0.75,0.77,-1.99,0.66,0.96,-1.86,0.66,0.07,-1.99,0.47,0.07,-1.99,0.84,1.26,-1.99,0.66")}
	local f={split("1,2,3,0,1,3,2,1,4,1,0,4")
            ,split("6,2,3,4,0,5,1,0,4,5,2,6,6,3,10,5,6,9,11,4,12,4,5,8,4,11,1,0,2,5,7,6,10,6,7,9,4,8,12,5,9,8,2,15,3,0,13,14,0,1,13,2,14,15,3,15,10,15,14,18,13,11,19,14,13,17,11,13,1,2,0,14,15,16,10,16,15,18,17,13,19,18,14,17")
            ,split("3,4,6,6,7,3,1,2,6,13,1,16,10,7,9,13,14,1,14,11,2,11,15,8,0,1,4,12,16,0,7,5,3,2,7,6,7,2,9,14,2,1,11,9,2,9,11,8,1,6,4,16,1,0,4,3,19,20,19,3,18,17,19,17,24,26,20,22,21,25,24,17,23,25,18,15,23,8,17,0,4,26,12,0,5,20,3,20,18,19,18,20,21,18,25,17,21,23,18,23,21,8,19,17,4,17,26,0")
            ,split("7,2,4,9,6,3,9,4,8,7,4,1,3,0,4,6,9,5,3,4,9,4,2,8,0,1,4,9,8,5,2,7,11,12,13,10,11,13,8,11,7,1,0,10,11,13,12,5,11,10,13,2,11,8,1,0,11,8,13,5")
            ,split("4,5,0,13,10,12,2,5,3,6,4,1,7,6,3,14,12,16,9,11,14,13,6,17,7,17,6,5,14,7,4,12,5,13,12,6,15,17,7,11,17,15,17,10,13,18,16,12,19,14,16,20,11,10,16,11,9,16,8,10,16,10,11,18,8,16,18,12,8,19,9,14,19,16,9,20,10,17,20,17,11,5,2,0,10,8,12,5,7,3,4,0,1,6,1,3,11,15,14,14,15,7,12,14,5,12,4,6")
            ,split("5,4,0,10,13,12,5,1,3,4,6,2,6,7,3,12,14,16,11,9,14,6,13,17,17,7,6,14,5,7,12,4,5,12,13,6,17,15,7,17,11,15,10,17,13,16,18,12,14,19,16,11,20,10,11,16,9,8,16,10,10,16,11,8,18,16,12,18,8,9,19,14,16,19,9,10,20,17,17,20,11,1,5,0,8,10,12,7,5,3,0,4,2,2,6,3,15,11,14,15,14,7,14,12,5,4,12,6")}
    local tc={split("0.5,0.11,0.49,0.07,0.39,0.08,0.46,0.13")
            ,split("0.36,0.95,0.28,0.96,0.32,0.91,0.27,0.88,0.21,0.95,0.23,0.88,0.15,0.9,0.43,0.89,0.31,0.77,0.12,0.8,0.12,0.85,0.21,0.78,0.39,0.78")
            ,split("0.2,0.4,0.02,0.45,0.09,0.25,0.32,0.33,0.34,0.58,0.19,0.61,0.12,0.8,0.21,0.78,0.49,0.54,0.53,0.37,0.31,0.77,0.39,0.78,0.53,0.78,0.43,0.89,0.03,0.65,0.09,0.81,0.16,0.17")
            ,split("0.67,0.54,0.8,0.54,0.8,0.67,0.49,0.54,0.53,0.37,0.62,0.44,0.76,0.4,0.7,0.66,0.52,0.76,0.69,0.27")
            ,split("0.16,0.17,0.4,0.2,0.37,0.16,0.86,0.88,0.81,0.93,0.81,0.88,0.53,0.37,0.32,0.34,0.69,0.27,0.56,0.11,0.56,0.15,0.5,0.2,0.65,0.92,0.62,0.89,0.67,0.89,0.73,0.92,0.67,0.93,0.78,0.89,0.81,0.79,0.74,0.79,0.67,0.79,0.62,0.79,0.73,0.87,0.86,0.46,0.82,0.45,0.82,0.3,0.88,0.54,0.91,0.54,0.88,0.66,0.9,0.3,0.93,0.3,0.93,0.37,0.93,0.25,0.89,0.26,0.88,0.25,0.85,0.17,0.89,0.46,0.93,0.57,0.92,0.19,0.19,0.08,0.17,0.11,0.13,0.06,0.18,0.04,0.86,0.93,0.73,0.03,0.86,0.79")
            ,split("0.16,0.17,0.37,0.16,0.4,0.2,0.86,0.88,0.81,0.88,0.81,0.93,0.53,0.37,0.32,0.34,0.69,0.27,0.56,0.15,0.56,0.11,0.5,0.2,0.65,0.92,0.67,0.89,0.62,0.89,0.67,0.93,0.73,0.92,0.78,0.89,0.81,0.79,0.74,0.79,0.68,0.79,0.62,0.79,0.73,0.87,0.86,0.46,0.82,0.3,0.82,0.45,0.88,0.54,0.88,0.66,0.91,0.54,0.9,0.3,0.93,0.37,0.93,0.3,0.93,0.25,0.89,0.26,0.88,0.25,0.85,0.17,0.89,0.46,0.93,0.57,0.92,0.19,0.19,0.08,0.13,0.06,0.17,0.11,0.18,0.04,0.86,0.93,0.73,0.03,0.86,0.79")}
    local uv={split("2,1,0,3,2,0,1,2,0,2,3,0")
            ,split("2,1,0,5,4,3,6,4,5,3,1,2,2,0,7,3,2,8,10,5,9,5,3,11,5,10,6,4,1,3,12,2,7,2,12,8,5,11,9,3,8,11,1,2,0,4,5,3,4,6,5,1,3,2,0,2,7,2,3,8,5,10,9,3,5,11,10,5,6,1,4,3,2,12,7,12,2,8,11,5,9,8,3,11")
            ,split("2,1,0,0,3,2,5,4,0,7,5,6,9,3,8,7,10,5,10,11,4,11,13,12,14,5,1,15,6,14,3,16,2,4,3,0,3,4,8,10,4,5,11,8,4,8,11,12,5,0,1,6,5,14,1,2,0,3,0,2,4,5,0,5,7,6,3,9,8,10,7,5,11,10,4,13,11,12,5,14,1,6,15,14,16,3,2,3,4,0,4,3,8,4,10,5,8,11,4,11,8,12,0,5,1,5,6,14")
            ,split("2,1,0,5,4,3,5,0,6,2,0,7,3,8,0,4,5,9,3,0,5,0,1,6,8,7,0,5,6,9,1,2,0,4,5,3,0,5,6,0,2,7,8,3,0,5,4,9,0,3,5,1,0,6,7,8,0,6,5,9")
            ,split("2,1,0,5,4,3,7,1,6,10,9,8,11,10,6,14,13,12,16,15,14,5,18,17,19,17,18,20,14,19,21,13,20,5,3,18,22,17,19,15,17,22,17,4,5,25,24,23,28,27,26,31,30,29,33,30,32,33,34,29,33,29,30,35,34,33,25,23,36,28,37,27,38,33,32,41,40,39,41,39,42,1,7,0,4,43,3,1,11,6,9,44,8,10,8,6,15,22,14,14,22,19,13,14,20,3,45,18")
            ,split("2,1,0,5,4,3,2,7,6,10,9,8,9,11,6,14,13,12,16,15,13,18,4,17,17,19,18,13,20,19,14,21,20,3,4,18,17,22,19,17,16,22,5,17,4,25,24,23,28,27,26,31,30,29,31,33,32,34,33,29,29,33,31,34,35,33,23,24,36,37,27,28,33,38,32,41,40,39,39,40,42,7,2,0,43,5,3,11,2,6,44,10,8,8,9,6,22,16,13,22,13,19,13,14,20,45,3,18")}
    for i=1,#vertices do
        vt[i],vm[i]="",""
        for j=1,vertices[i]*3,3 do
            local x,y,z=v[i][j],v[i][j+1],v[i][j+2];
            y,z=rotate(y,z,qt);
            x,z=rotate(x,z,qt*1.5);
            vm[i]=vm[i]..x..","..y..","..z..","
            z=z+5;
            x=x*96/z+64;
            y=y*96/z+64;
            vt[i]=vt[i]..flr(x)..","..flr(y)..","..flr(z)..","
        end
        vt[i],vm[i]=split(vt[i]),split(vm[i])
    end
    for i=1,#vertices do
        local x,y,z=0,0,0
        for j=1,vertices[i]*3,3 do
            x+=vm[i][j]
            y+=vm[i][(j+1)]
            z+=vm[i][(j+2)]
        end
        x/=vertices[i]
        y/=vertices[i]
        z/=vertices[i]
        order=order..i..","..flr(sqrt((0-x)*(0-x)+(0-y)*(0-y)+(-10-z)*(-10-z))*1000)..","
    end
    order=sort(split(sub(order,1,-2)))
    for i=1,#vertices*2,2 do
        draw_model(p,qt,vertices[order[i]],vt[order[i]],vm[order[i]],faces[order[i]],f[order[i]],tc[order[i]],uv[order[i]],{chicken_tex},true,32,false,1024)
    end
end

function sort(seq)
    for i=1,#seq,2 do
        local max=i+1
        for j=i,#seq,2 do
            if(seq[max]<=seq[j+1]) then
                max=j+1
            end
        end
        tmp=seq[i+1]
        seq[i+1]=seq[max]
        seq[max]=tmp
        tmp=seq[i]
        seq[i]=seq[max-1]
        seq[max-1]=tmp
    end
    return seq
end

function draw_plasmas()
    local plasmas={"","","","","",""}
	for x=0,31,1 do
		for y=0,31,1 do
			c=tostr(((
				16+(16*sin(x*0.016+sin(t*0.001)))+
				16+(16*sin(y*0.008+sin(t*0.001)))+
				16+(16*sin(sqrt((x-63)%2*(x-63)%2+(y-63)%2*(y-63)%2)*0.016+sin(t*0.01)))+
				16+(16*sin(sqrt(x*x+y*y)*0.004+sin(t*0.01)))
			)*0.25+t)%6,true)[6]
            for i=1,6,1 do
                plasmas[i]=plasmas[i]..tostr(c+((i-1)*2),true)[6]  
            end
		end
	end
    return plasmas
end

function bridge2()
    background()
    draw_torus(0)
    mirror()    
end

function bridge1()
    background()
    for i=0,5 do
        draw_cube(i*0.1)
    end
    mirror()      
end
__gfx__
313131313131313dd666dd66777666d31313131d6666666666dd3113131313131313131313131313131313131313131313131313131313131313131313131313
1c1c1c1c1c1c131cd76677777777766c1c1c1c3c767777767666cdc131c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1
311131113111c13d6677777777777766c1313d67777676676766666dc11111131113111311131113111311131113111311131113111311131113111311131113
11c1c13c11c311c677777777777777766d6dc6776767677676666676631c1c31c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1
3c1311c11c111c66777777777777777777667767767776766667776766cd311c1113131113111311131113111311131113111311131113111311131113111313
1131c11311313d777777777777777777767667676767676766767676776dc3c133c11c1c13c1c13c11c31c1c13c1c13c11c31c1c13c1c13c11c31c1c13c1c131
31c311c1c1c1c66777777777777777777776767677777676767676767676ddddc11c1131c1111c11c11c1131c1111c11c11c1131c1111c11c11c1131c11311c3
1c11c311135cdd677777777777777777776767777676676667676767767776dc113131c1131c3113113131c1131c3113113131c1131c311311311c1311c11c11
311311c3c1c1d666777777777777777777676767676776677676767667677666dc1c1c11c1c11c1c1c1c1c11c1c11c1c1c1c1c11c1c11c1c1c1c113c1313c11c
1c1c13113cdc6666777777777777777777767776767667767676767776767776dd31113131131311313111313113131131311131311313113131c111c1c11311
13131c1c1ddd6677777777777777777777677667676777676767676767676776cdc3c1c1c3c1c1c1c1c3c1c1c3c1c1c1c1c3c1c1c3c1c1c1c1c313c31311c1c3
c1c1c313dc6667777777777777777777767766767777777776767676767777766d31131311131313131113131113131c131c13131113131313113c111c1c3131
131311cdcd67777777777777777777777766777777777777777767776767777776c1c1c1c3c1c1c1c1c3c1c1c3c1c1c13cd13ccdc3cdc1c1cc3cdd3c31311c1c
3c1c3c1c5667777777777777777777776776767777777777776776777777677776d3c13c113c131c131c131c113c133c13cdcdd666666c1311cdcdcdcc1c31c1
11c31133c777777777777777777777777677777777777776777777777777777777dcd3c13c131c331c31c1c13c131c1dcddd6677777766dc3cdd66ddddc1c313
3c313cc6777777777767767777777776777777777777777777777ddd5d5dd667776d1cd1c1c1c1c1c31c1c13c1c1c3dcddc667776766776ddd6666666d6ddc3c
d1ccd6777677767777777777777767677777777777777777777d10111010111d6676cd3c133c131c1c1333c1331cddcd6667776676776766666666666666c113
3c1d6677777777776777777767777677777777777777777776111353522553531dd6dcd3cd13cc3131c1c13c1c31c3dc66667676766766767676666776666cc1
3dc6777777777777777777777776777777777777777777765001111555553555555dddddc3cc131cc3c3c1c1c1c31cddc6676767676767676666676667666dd3
dc67777777777777777677677777767777777777777777d101131111131113522243ddddd3d13dc31c1d1c1c33c1cdcd666766767676766666676667677666dc
dd67777777777777777777777677777777777777777771013511111045015000055553dddc3cc13cd3c3c3d3dc5cd3d6c66676676767676767666766676766c3
c6777777777777777777767677767677777777777777101513101054444450445002023ddd31cc13c1d3d3c1cdcdcdc666666766767667666667667676777763
d67777777777777777776777767777677777777777610500551054449444544a44000003dddc13dc1c3c1c3c3d3dd6666666666767677667676667666766776c
6777777777777777767677676776767777777777771015001100494444954fa4440000113ddc3dc3d3c1c3ddcdc6c6666666767666766676667676677667777d
d7777777777777777776767676776767777777777100100005544454a4f544455044440015dddc3c3cdc3dcdd66666666666666677667666666766766777777d
66777777777777776767777777677777777777771011010544509a454444444444af9440135ed3ddc13dc33c6666666666666666767666666766766766767776
66777777777767667677676767767767777777750011000445451444555505444444a4400155dccc3cdc3dc67666666666666676776666666666677677777776
66767777676666676676777777777777777777d0010005455454055405454455445a4f950013d5553dc3dc666766767666666667767666666666666776776776
6767767666667666776767676767767767777700100050504520555544d466f500444f495013449ed3cdcd676767666667676776777666666666666777767776
6666766676766676676776777777777777777600010052050544444554d44dfff50544ada401444ffd3c366767667667666676776776666666c6666677777776
666666766666766766766767677677677777760100050505445d5554554dd4d6ff65454444524244763dc66776766666667676767776666c6666666676776776
6666676676766676676676777777777777777d0001002044dd45454554d44dffff77640544444044f6dcdc6767666666666767777766666666666c6677777766
6666766766667667667767676767777767777d01100404d454d454554545daddfff777454444444ef7d3c6667666666c6666767676666c66666666667776767c
6676776667666766766676767777676776777d0001054d4d4d4d454554d4ddefdf77777d44422449477dd667676666666666676666c666666c6666676767676d
76676767667666666676676776767676677776050050d454d454d554554d4d4dfff7777f44444004ee777d6776666666c6666666c66666666666666666666666
667766666666666666666676676666667676412202054d454d4d544554544dff6f7777764444f4004a6f766667666666666c66c6666c6c6c6666c6666666766c
77666666666666666666766676676767676002420205545d4d4d4d5545d4dfdfff77777744424ef4444ffd66767666c666666c66c6d66666dcdc66c6c66766cd
666666666666666666666766666676766760244002005d454d4d4445545d4dadfff7777744924f77f44fdcc677666666c6c6666666c6dc6c6666c6dc6c6666cd
6666666666666666666666666676666676700222004054d454d4d5d44d4d4ddf6f777777644454efe49edcd6777666c66666c666c66c66d666c66c6dcdc6ccdc
66666666666666666666666667666767667d200004205545d4d4d44554d4fdffff7f6f774499444444ffdcdc67766c66cc6c66c666d66c6c6c66c6dccdcdcdcd
6666666666666666666666666667666666675040220204d44d464d5d4d4ddff64554456765a44945496fdcdc66c6c6cdd6c66c66c6c6c666666cdccddcdcdcdc
666666666666666666666666666666666666522002205455d4d4d4d4d4da6455005dfff77d9a4944f6ddcdcdcdcdcdcccddcd6cd6c6c66c6c6666dccdcdcdcdc
6c6666666666666666666666666666666667502020005d4545555554d4d5f50000554df777694444afccdc6cdcdcdc6d6ccdccdcdcddcdc66c6c6c6dc6cdc6cd
66666666666666666666666666666666666644005004545555550005454455200000155d7774164994dc6cdc6c6c6cdcdcd6cdc6cc6c6c66c6c6dcdcdcdcdcdc
6666666666666666c666666666666666766c49450400544545202020dd4d54504d10d656777604dddccdcdcdcdcdcdc6c6ccdc6dddc6c6ccd66c6c6c6c6c6c6c
6c666666666666666c666666c66666766c6c6d44005046d5000000025454dd0066d1d6677776046cc66c6c6c6c6c6c6cdc6c6d3db6dddc6d3dc6cdcdcdcdcdc6
c6c6c666666666c6c66ccccc6c666666c6c6ccd450505400dd105d000d567740055d4677f77d077d6ccdc6dcdcdcdcdc6cddcddddddbddbdddddc6c6c6c6c6dc
6c6c66cc666666666ccc66d66c6cc6cc6cdc6c650525fd5556615402544677652554ddfff774576dccd6cdc6c6c6c6c6cd6ddbdbddbddddddb6c6cdc6c6dc6c6
c6c6c6c66c6c6cccc6d6ccccc6c6cc6dc6c6c6c6d520e45d55dd5554dd5d77fd45dd4dff7776676dc66c6c6c6c6c6c6d5dbdbddddbdddb6ddddc6c6cdc6c6c6c
6c6c6c6c6c6c6666c6c6d666cdc66dc6c6c6cdccd45064544555555d4d4d777fd4d4d46ff777776c6cc6c6c6c6c6c63dbdd5d5dbdddbdddbdd6c6c66c6c6c6c6
c6c6c6c6c6c6cccc6c6c6ccc6c6c6c6c6c6c666c64404645545454d46454777ffd4d4de6f77f76d6c66c6c6c6c6c6c6dd53d5d5dd5ddddddbdc6c6cc6c6c6c6c
66c6c6c6c6c6c666c6c6c666c66c6c6c6c6c6cc6dfd55d4d45454d4fdd4d777fffdd446ef7764dcc6c6c6c6c6c6c6ddbd5d5db5dbd5dbdbddd6c6c66c6c6c6c6
cc6c6c6c6c6c6c6c6c6c6cc66cc6c66d6d66c66c66f45ed4d4d4d4d4df4df77f6ff4d4df6f762566c6c6c6c6c6c63dbd5d3535d5d535dddddb66c6c66c6c6c6c
66c66c66c666c6c6c6c6c66c6d6dd3353335535dbd4d44d4d4d44d4d4d54d777ed4d4d4df77753c66c6c6c666c6d5dd5d35d553d3d535dbdddc66c6c6c66c6c6
6c66c66c66cc666c666dd53535335555555355355354dd4d4d4d44d454555fffd4d454d4e77651dcddd6d66cc6c635d35d353d55d35d35ddbd6cc6c6c66c6c66
6c6c66c6dbdd3d35533353555555151315155355555554d4d4454d4555504d50dd554d466f7651353533533dd66c653d5355553535d55535d536666c66c6c66c
66ddb553555555553555555315155355515155535355505444d455555502054dff55d4ddff7611555555555533566cd53d53535d66c535553566cc66c6c66c66
35355555553535355553515553515151535515155535505d554555554545556f6f55554ff77d11353535353555335ddd5355dd5dcddddd3556c666c66c6c66c6
555553553555555553553515155355351553535535551105455555554dd540d7f7f54dde6f75115d555555555555535355553535553dc66ddc66c66c6666c6c6
55d35555553553535555555355155155551515151515311545255254dd4dd4d7777d54ddf771315d3535535353553555535355515353553335533d3ddc6c6666
535553535555355553535355535535513551555355351510555555556d45555255d50dfff7d0515d555535555553553535555315355553555351515313535dc6
5d53d55553555553555555535555513551535351515551111455525d45000002222e656f77105535353555353555555553535515535351515153531551153135
535555535535535555355355535355555355515535513511014255552002022484d7f4667601351dd15535555353535355553501555535353515155315315151
555535355555355353553553151513131511153115355531105554555222020004ff66676f115553515355535555555553535555353151515353531515153135
111105051111011010100100100000000000000010051115111555525555255df66dfdf6f7105d15d10101010101000010010000000100010000000000000000
55555555555545454545455455d4d4d45d4d54545455311351114555555454f777f66fd6f7513d11355455545555555555455555455455554554545545545454
df4fdfdadf4fdfdfdfd6dfdfdfd646dfdfda66666fd1101115014555455555d676f6fd4f77501d1555fdf6fdf6fdfdf6e66df6f666fdfdfd6dfd66dfdfd6d6dd
adadadadadadadaada6aada6adaa6aadada6da4a4ad351101315d5255555455e6f6fdd6777d01313d5fa6adafadafafa6afa6a6afada4a4afaa4a4adafada4ad
6a6a6a6a6a6a6a6da6adfa6a6a6daddadad4adad6f4510011101445552555555dd64df77f76dd515d5f6adaf4faf6ff6af6f4f4fdfa6f6f64ddfdffa6fffffff
daddadadfdadadaf6a6adf4646adadad4dad4dda4ad3110051155d44555552005456f7f77f667505d5a6af6a6a6afa6a6a4fa6adad4ada44a4a4a44d94afffff
adaada6ada6f6afda646a6a6a4da4d4da44da4add6415001105d54d5545255525df7ff7f7f6677133dff6afff6ff6ffff6f4646a6a64f46adadadadadad4a6af
d6fda6ada6adafdaf46adad45ad4d5a45d5a5dda4aa5110105d54d45454554554ff6f6f77f6667d155ada6fdafa6a6adafa6afadada6adad464d464f4fda64ff
aada646a646addadada54545d545445544455445d655301155555d5d555455555f6f6f77f666777505fffa6a6f6a6adffdfadfdf4fd464f4adafa4adada64fa6
dfada646a6ada6a6d4d4d4da545a55455554554544d511015515544545554545d7f6f6f764d6777711af6affafff4fa6af4fa4ada4fa4f464ad4df464f4fadfa
dadfda6a646a6464ada5a5455a55a545a5a5445455453005555105d5d4545554dff6ff7fddd6677775afa6af6adaff6ada6fdfdadf4dada4ada4ada4ada4dadf
adadafdada6adadad45d54d44554555455555555545551555555025445d5d545dff6f66d4d66677777da6ffda6a6f4f4fda4ada4696adadadf4fda4fda46aeaf
6a6adadadad4ad454a5a5a5a54454455545454545543115555ddd50455454555466edd44d6dd7777777da4afdadf4fa6adfdfadf9da4f4ada4adadf4adaf4faf
4646adadadad4ada5d4545554d5a55454555455545451555dd5dd6505455545454d544d666d6777777764f6afda6addada4adf9dadf4ad4f464ada4f4f4af4fa
dadadadadadad4545a5a5a5a595554555454554555451ddd5dddd6fd014d4d5d55455d66dd66777777775546afdadaadadfda4dada464fadaadaea6a6af46aff
adadadadad4da5ada54d4545555545454545545545005ddddd666677640555454555666666f677777777100554afafd9da4a46a4dad969da4dadad9d964fafda
dadadadadaad4d4454d45a5445455554555545455001d65d6d666667776d45545d66666666667777777750101155554fadadf4daf4adadadfadada6a69fadaae
4dadadadad4adadada5a5545454545455454555001056dd6d6d66667777655d45d66666d667777777777d010111155554ad9da4dadad4ada4faeaeaea6a6ae6a
dadada4f46ad45454545445a5454555545555501101d66d6d6666677765d664d65d66d6666677ff77777d1050515111115d4adf9dadafdadf4dadadaf4f96aaf
adad46dada45adadada5a545554555455551000500566d6666666777d1d6665d6d666666666d6e4f77776500110501155555d4964f4f4a4f9fadadaf4fa6eadf
dada69adadda5454545455a5445454511015151001666f96d666677515d666d46676d6666d6f49e9e777d111051051515555555aa4a4adad4adaeada6ad9adaa
4d4daddadad4ada5a5454554555545053510101105ffeef66666775055d6665d6776dd66669efe9e4777dd601050101511555511dad64f4a64f464f4adadfadf
ada4da4dada654d45a5a544554445550015151000df9f9f66667730155d6674d677dddd66feee949e777ddd010105050151153555da4adad4ada4adadada4da4
da4da4dadad44a5a4545455595555d501101001016fe9ee666761031556767dd7765565d66e99e99ef76121105010110515511d514dad4d4ad4dad9dada46a4f
4ddadda54d9dad4d5a545a5935355551013101005fe9eea677d2030555d767d677656650e76ee4ee9f7d1d610101050511111d66d5444a44d4a44da4d9da4da4
4a54a54ad4da5a5a5da54545dd554515010100006f9e94e765245335d5d7676d77d561044d769e94ee711d6d001010105010d6666654554a54dad9da4d4da4da
d5ad5add5ad4ddada45a5456d444245110150101feff7f7d002235315dd7666677dd0048846fe94ef7601211010010501105d6d6d6755a545a45454544445a44
54554d54ad5a5a4d5dad546644455255011100005d6666502248033005d767667750004882067fef76441dd100010101101dddd66f764555455455555555555d
45a5a5a555a5555a4a54a66d54454525101001000005d1149504535000015dd665000284405567667d09dd6d01005000115dddd699f7d5555555555555555555
55555555a555a555d5a5666d5524425550010010000121124220333400000005000008480050067764402d1200100010005d5dd59f777555555b5555b55b55bd
a5ad45a5554555a54d5666d555542211510010010001dd10405513048220001110004888054a506742a41d200100100105dd5d494af77655b5555b5555555d45
555555555a554554b4d66dd55355505555010010000dd114445003308480011510088440053440035244dd620005001005d5dd9499f7775555555555555555bd
5455a554555555454566dd553dd51555d500010000002d14420535358848822208898920054003330440d1dd020000001ddddddde96777735535555b55b5db4d
5555555b4555a5555d6d6d55d65155d4410010101001dd10045553304828888889e8420054a5036d44a21dd0002020005654dd66d666677d3555355555555555
5555554555555b5556dddd5566515544450000000001dd204425035b000884894882000055550330429ddd620000000056dd6dd66676677f53555355555b5555
555554b554b5544b5ddd6556761554444400010100001d10442055330002022420000005a4001bd04401d1d1002020016dd649666dd6777755535553535555b5
555b4b455b455b55d65665567d555444440000000200ddd10455430310000000000000154a003d6449402d10020000056dd999e663d66777d355535555555555
5554555555555555d65d65d775555544450001010000dd1144400535d000115110000199030033040941d7200002000ddd94949d76776677605355535535b55d
5553553535353535dd5665d66553555441000000020012d024250533301001051000055a4003dd04440dddd02000001dd99ea949477677776355535535555db5
3535535355535355d5d665d7651535545100000200001dd10442000335501051000054151013db44940111000000000ddde999994d7776776535355555b5555d
5553553533553535d5d6d5d7d15355551500000000202d11094000353505501110019a50003530404416d100202000515649eae9ddd77777750555353555b555
3355355355355355d5566d67615551dd55001002000001d2102400133059a055059534500136304441dd6000000000555d699e9fdddd77777d353555555555b5
5533533553535355555d6d67d1551565d510000002000dd1124440003303454a55aa00001333324a91d12102000001555556ddd66dddd7777d05553535b5b5d5
535535553535353555566666d1555d6d4510000200020dd21294000353d50555555500003bd0042441dd00000010055555556d6d6ddd56777d535355555555b5
353553353553555551566666555156dd55500000000001211002500533d30050000000135d6049400dd61010111015555515ddddd6dddd67760535535b55b555
53535553535533555156d666515166ddd55000000000001dd1044400030b50010000003db00544a002dd500101005555555553ddd66dddd67635535555b555bd
355353353533553551566d6651156dddd5100100000100d62149250005bd33301001353b600524201dd0110110001515555555bddd66ddd676535535b555b555
55353555535553555156dd66515666dd515000000100001d1102024001d035350353b63100949002dd610110000115555d55555dddd6ddd677535b5555b554b5
353553353535353550d76d6d15566ddd51100000110010012dd04990000033d6356353500442a401d16200000005101555d55555dd666dd67765555b5555b555
53535553555353555167dd6601566d65051000000110000d6dd044440000153033d3000004945012d2d0001000055501155d55555ddd6ddd7775b555b5b45b55
55353353533555351566dd6d15d6d56d1050010000110111d1d500444100000003000000444900dd6d001000001555515155d55555ddd6d6777655b5555bd4b5
535355353555335515765d6d01666ddd151100000001110002d600449500000510000004442500dddd010011001555505555d55555d6666d77775b55db555bd5
35553553535355551d7dd66d056dddd650500000000000000ddd105224450010000000449a0001dd1100110100555555555d5d55515dd6d66777655b555bd55b
533553553535b5551d6d5d6d156dd5dd50550001000010000dd1dd00449900010000049444000dd7d0001110001555d555ddd5d5d106666d77776555bd555bd5
5555b55b55b55b55566d5dfd056ddddd5015000001000000001ddd0054444445400444f90000ddd6500000000055555d5d5dddd555056d6667777dbd4bdbad5d
5b5b55b55b55b555566d5d6d056d5d5d5015000000101000101dd1d5000449949949924400126d110000010000511555d6d6d55dd105666d67777654bd5d55b5
55555b55b45b5555566d5d6d156dd5dd5055000001110011000112d6d000442444449000002dd610000010000051015556d66dddd005d66667777635d5b4bdd5
35b555b553555355d66d5566056dd55d501510000001111000000dddd1100000505400000dd1dd0000000000005550555d6d6dd6d510d6666777765b5dd5db4b
5555b555555b5555d66d55d6156ddd5d5105501000010100000001d116d0000000000000dd611000010010000015501555d666d6d15156666777765d4b5b5d5d
5b5b55b5b5b55555d66d5566056dd55d501550000000100001000001ded1d100000101d2dd7d0000000100000055511555d6d6d6d1505666d7777fb5b5d4d5b5
5d5d5555555db555d66d55d615dd5d5d510550000000000000001000dd12661d51d6d2d612d10000000000000051515155d66666d551566666777755d5b5b5d5
5b5b5bdbdb55db55666651d615ddd555550155000100010000000000001dddd66ddd6dd610000001000000000155150555dd6dd6d5555d666677775b5d5d5dbd
5d55d5555d5b5555d666555615d65d55511155000000000100000000001211ddd2dd21210000000001000100001551515556666dd5155d66677777d4b5b4b555
55b5b5b5b5b5d555d666d05650d6dd55d501551000010000001000100000001110110010000000000000000001551511555dd6d6d5551576677777dbd5d5d5d5

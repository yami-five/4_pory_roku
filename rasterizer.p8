pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
ball_shadow,shadow_size,shadow_r={},44,22
tex='677765677656777677776566665677777777655ee55677777776555ee55567776665555ee55556665555555665555555665555677655556676eee6e77e6eee6776eee6eeee6eee676655556ee655556655555556655555556665555ee55556667776555ee55567777777655ee556777777776566665677776777656776567776'
chicken_tex='5555555555555555555555555555555555555555555555545555335555555b5555554455555544545533b5555555545555555455555554445353b5555545595555555333333b554533b5555555555a55555535b55555b553555b55b5555454555553b5b5555b5b3bb5b55555555454555535b55b5bb5bb5b5bb5b55555554555553555555b55555555555555555545555355555555555b555555b555559544555355555555bbb55555bbb555554554553555555b55555bb5555553b5554454553b555b55555555b555b3533b554455553bbb555b5bbbb3555555b353b5445555b555b55555555bbb55bbb5b3b5444555b55555355b5555bb55535b5b33555555bb555555b5b555b5555b5353b3b55555355555d55555555555bbb53533554a55355555555555555555b33bb53bb544553555b555555555555b335b3535555b5535555b5bb55555555bb5b3533bb545553555b55555b5555555b553b5bbb545553355555555555555555b555bbb5555555222555555555555b555555555555555544455555555555555555555555555555555555555555b55555555555b5b5555555b4e55565d555555555555555555555555bb55d55d65d5555444445555555555552b5dd56ddd55555444444454555555552255655d6d5555554444545455555555524225ddd555555555555555555555555555555555555555555555555555'
amiga_ball_texture='8888777788887777888877778888777788887777888877778888777788887777'
function init_amiga_ball()
    pal(6,13,1)
    pal(12,1,1)
    pal(13,133,1)
    local r2=shadow_r*shadow_r
    for y=0,shadow_r do
        local y2=y*y
        for x=0,shadow_r do
            local x2=x*x
            if(x2+y2<r2)then
                ball_shadow[(shadow_r-y)*shadow_size+(shadow_r-x)]=1
                ball_shadow[(shadow_r+y)*shadow_size+(shadow_r+x)]=1
                ball_shadow[(shadow_r+y)*shadow_size+(shadow_r-x)]=1
                ball_shadow[(shadow_r-y)*shadow_size+(shadow_r+x)]=1
            else
                ball_shadow[(shadow_r-y)*shadow_size+(shadow_r+x)]=0
                ball_shadow[(shadow_r+y)*shadow_size+(shadow_r+x)]=0
                ball_shadow[(shadow_r-y)*shadow_size+(shadow_r-x)]=0
                ball_shadow[(shadow_r+y)*shadow_size+(shadow_r-x)]=0
            end
        end
    end
end
function zoom_rotator_texture()
    local texture=""
    for i=0,0x2000,1 do
        texture=texture..sub(tostr(@i,true),5,6)
    end
    return texture
end

function texturing(x,yp2y,inv,p0,p1,p2,uv0,uv1,uv2,tex_size,texture,fac,tsts)
    local Ba,Bb=((p1[2]-p2[2])*(x*2+fac-p2[1])+(p2[1]-p1[1])*yp2y)*inv,((p2[2]-p0[2])*(x*2+fac-p2[1])+(p0[1]-p2[1])*yp2y)*inv
    local Bc=1-Ba-Bb
    local uv_x,uv_y=Ba*uv0[1]+Bb*uv1[1]+Bc*uv2[1],Ba*uv0[2]+Bb*uv1[2]+Bc*uv2[2]
    uv_x = max(0, min(1, uv_x))
    uv_x=flr(uv_x*tex_size+0.5)+1
    uv_y = max(0, min(1, uv_y))
    uv_y=flr(uv_y*tex_size+0.5)+1
    return texture[max(0, min(tsts, flr(uv_y *tex_size + uv_x+0.5)))]
end

function rasterize(y, x0, x1, uv0, uv1, uv2, inv,p0,p1,p2,l_int,tex_size,texture,fast,tsts)
    if (y<0 or y>127) return
    local q,n
    local yp2y=y-p2[2]
    n=(flr(y)%2+0.5)*0.5
    x0+=n;
    x1+=n;
    if (x1<x0) q=x0 x0=x1 x1=q
    if (x1<0 or x0>127) return
    y=flr(y+0.5);
    if (x0<0) x0=0
    if (x1>123) x1=123
    x0,x1=flr(x0/2+0.5),flr(x1/2+0.5)
    for x = x0, x1, 1 do
        local color="0x11"
        if(l_int>0.3)then
            local texture_color1 = texturing(x,yp2y,inv,p0,p1,p2,uv0,uv1,uv2,tex_size,texture,0,tsts)
            if(l_int>0.97)then color="0xa"..texture_color1
            elseif(l_int<=0.97 and l_int>0.5)then
                if (fast!=true) then color="0x"..texture_color1..texturing(x,y,inv,p0,p1,p2,uv0,uv1,uv2,tex_size,texture,-2,tsts) end
                color="0x"..texture_color1..texture_color1
            elseif(l_int<=0.5)then color="0x1"..texture_color1
            end
        end
        poke(0x6000 + y * 0x40 + x, color)
    end
end
    
function tri(x0,y0,x1,y1,x2,y2,uv0,uv1,uv2,l_int,tex_size,texture,fast,tsts)
    local x,xx,y,q,q2,uv;
    if (y0>y1) y=y0;y0=y1;y1=y;x=x0;x0=x1;x1=x;uv=uv0;uv0=uv1;uv1=uv;
    if (y0>y2) y=y0;y0=y2;y2=y;x=x0;x0=x2;x2=x;uv=uv0;uv0=uv2;uv2=uv;
    if (y1>y2) y=y1;y1=y2;y2=y;x=x1;x1=x2;x2=x;uv=uv1;uv1=uv2;uv2=uv;
    local dx01,dy01,dx02,dy02;
    local xd,xxd;
    if (y2<0 or y0>127) return
    y,x,xx=y0,x0,x0;
    dx01,dy01,dy02,dx02,dx12,dy12,q2,xxd=x1-x0,y1-y0,y2-y0,x2-x0,x2-x1,y2-y1,0,1;
    if(x2<x0) xxd=-1
    inv=1/((y1-y2)*(x0-x2)+(x2-x1)*(y0-y2))
    if flr(y0)<flr(y1) then
        q,xd=0,1;
        if(x1<x0) xd=-1
        while y<=y1 do
            rasterize(y,x,xx,uv0,uv1,uv2,inv,{x0,y0},{x1,y1},{x2,y2},l_int,tex_size,texture,fast,tsts);
            y+=1;
            q+=dx01;
            q2+=dx02;
            while xd*q>=dy01 do
                q-=xd*dy01
                x+=xd
            end
            while xxd*q2>=dy02 do
                q2-=xxd*dy02
                xx+=xxd
            end
        end
    end
    
    if flr(y1)<flr(y2) then
        q,x,xd=0,x1,1;
        if (x2<x1) xd=-1
        while y<=y2 and y<128 do
            rasterize(y,x,xx,uv0,uv1,uv2,inv,{x0,y0},{x1,y1},{x2,y2},l_int,tex_size,texture,fast,tsts);
            y+=1;
            q+=dx12;
            q2+=dx02;
            while xd*q>dy12 do
                q-=xd*dy12
                x+=xd
            end
            while xxd*q2>dy02 do
                q2-=xxd*dy02
                xx+=xxd
            end
        end
    end
end
    
function tric(a,b,c,d,e,f,uv0,uv1,uv2,l_int,tex_size,texture,fast,tsts)
    local e1x,e1y,e2x,e2y=c-a,d-b,e-a,f-b;
    if (e1x*e2y-e1y*e2x<0) return;
    return tri(a,b,c,d,e,f,uv0,uv1,uv2,l_int,tex_size,texture,fast,tsts);
end
    
    
function rotate(x,y,a)
    local c,s=cos(a),sin(a)
    return c*x-s*y, s*x+c*y
end

function translation(x,y,z,xT,yT,zT)
    return x+xT,y+yT,z+zT
end

function draw_model(p,qt,vertices,vt,vm,faces,f,tc,uv,textures,calc_light,tex_size,fast,tsts)
    for i=1,3*faces,3 do
        local a,b,c,xab,yab,zab,xac,yac,zac,nv,l_dir,l_cos,l_int;
        a,b,c,l_int=f[i],f[i+1],f[i+2],0.9;
        if(calc_light==true) then
            -- flat shading
            -- normal vector
            xab,yab,zab,xac,yac,zac=vm[b*3+1]-vm[a*3+1],vm[b*3+2]-vm[a*3+2],vm[b*3+3]-vm[a*3+3],vm[c*3+1]-vm[a*3+1],vm[c*3+2]-vm[a*3+2],vm[c*3+3]-vm[a*3+3]
            nv={yab*zac-zab*yac,zab*xac-xab*zac,xab*yac-yab*xac}
            vec_len=v3_len({nv[1],nv[2],nv[3]})
            nv[1],nv[2],nv[3]=nv[1]/vec_len,nv[2]/vec_len,nv[3]/vec_len
            nv_len=v3_len(nv)
            -- light direction
            local tx,ty,tz=(vm[a*3+1]+vm[b*3+1]+vm[c*3+1])/3,(vm[a*3+2]+vm[b*3+2]+vm[c*3+2])/3,(vm[a*3+3]+vm[b*3+3]+vm[c*3+3])/3
            l_dir={50-tx,50-ty,50-tz}
            l_len=v3_len(l_dir)
            -- cos
            l_dir_nv=v3_len({l_dir[1]-nv[1],l_dir[2]-nv[2],l_dir[3]-nv[3]})
            x=nv_len*nv_len+l_len*l_len-l_dir_nv*l_dir_nv
            y=l_len*nv_len*2
            l_cos=x/y
            l_int=max(0.1,l_cos)
        end
        local tex_i=1
        if #textures==6 then tex_i=flr(i/3)%6+1 end
        tric(
            vt[a*3+1],
            vt[a*3+2],
            vt[b*3+1],
            vt[b*3+2],
            vt[c*3+1],
            vt[c*3+2],
            {tc[uv[i]*2+1],tc[uv[i]*2+2]},{tc[uv[i+1]*2+1],tc[uv[i+1]*2+2]},{tc[uv[i+2]*2+1],tc[uv[i+2]*2+2]},l_int,tex_size,textures[tex_i],fast,tsts)
    end
end
function draw_cube(p)
	local qt,vertices,faces,vt,vm=t*0.01,8,12,{},{}
	local v=split("0.35,0.35,-0.35,0.35,-0.35,-0.35,0.35,0.35,0.35,0.35,-0.35,0.35,-0.35,0.35,-0.35,-0.35,-0.35,-0.35,-0.35,0.35,0.35,-0.35,-0.35,0.35")
	local f=split("0,2,4,3,7,2,7,5,6,5,7,1,1,3,0,5,1,4,2,6,4,7,6,2,5,4,6,7,3,1,3,2,0,1,0,4")
    local tc=split("1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0")
    local uv=split("2,1,0,2,1,0,1,3,2,0,2,3,2,1,0,1,3,2,1,3,0,1,3,0,3,0,2,2,1,3,1,3,0,3,0,2")
    for j=1,vertices*3,3 do
        local x,y,z=v[j],v[j+1],v[j+2];
        y,z=rotate(y,z,qt);
        x,z=rotate(x,z,qt*1.5);
        x,y=inf(qt+p,x,y)
        y-=1
        add(vm,x);
        add(vm,y);
        add(vm,z);
        z=z+5;
        x=x*96/z+64;
        y=y*96/z+64;
        vt[j],vt[j+1],vt[j+1]=flr(x),flr(y),flr(z);
    end
    draw_model(p,qt,vertices,vt,vm,faces,f,tc,uv,{tex},true,16,false,256)
end

function draw_torus(p)
	local qt,vertices,order,rings,faces,vt,vm=t*0.01,12,{},8,12,{},{}
	local v=split("-0.0,0.0,1.02,-0.0,0.24,0.88,-0.0,0.24,0.61,-0.0,0.0,0.47,-0.0,-0.24,0.61,-0.0,-0.24,0.88,0.72,0.0,0.72,0.62,0.24,0.62,0.43,0.24,0.43,0.33,0.0,0.33,0.43,-0.24,0.43,0.62,-0.24,0.62,-0.72,0.0,0.72,-0.62,0.24,0.62,-0.43,0.24,0.43,-0.33,0.0,0.33,-0.43,-0.24,0.43,-0.62,-0.24,0.62,-0.0,0.0,1.02,-0.0,0.24,0.88,-0.0,0.24,0.61,-0.0,0.0,0.47,-0.0,-0.24,0.61,-0.0,-0.24,0.88,-1.02,0.0,-0.0,-0.88,0.24,-0.0,-0.61,0.24,-0.0,-0.47,0.0,-0.0,-0.61,-0.24,-0.0,-0.88,-0.24,-0.0,-0.72,0.0,0.72,-0.62,0.24,0.62,-0.43,0.24,0.43,-0.33,0.0,0.33,-0.43,-0.24,0.43,-0.62,-0.24,0.62,-0.72,0.0,-0.72,-0.62,0.24,-0.62,-0.43,0.24,-0.43,-0.33,0.0,-0.33,-0.43,-0.24,-0.43,-0.62,-0.24,-0.62,-1.02,0.0,-0.0,-0.88,0.24,-0.0,-0.61,0.24,-0.0,-0.47,0.0,-0.0,-0.61,-0.24,-0.0,-0.88,-0.24,-0.0,0.0,0.0,-1.02,0.0,0.24,-0.88,0.0,0.24,-0.61,0.0,0.0,-0.47,0.0,-0.24,-0.61,0.0,-0.24,-0.88,-0.72,0.0,-0.72,-0.62,0.24,-0.62,-0.43,0.24,-0.43,-0.33,0.0,-0.33,-0.43,-0.24,-0.43,-0.62,-0.24,-0.62,0.72,0.0,-0.72,0.62,0.24,-0.62,0.43,0.24,-0.43,0.33,0.0,-0.33,0.43,-0.24,-0.43,0.62,-0.24,-0.62,0.0,0.0,-1.02,0.0,0.24,-0.88,0.0,0.24,-0.61,0.0,0.0,-0.47,0.0,-0.24,-0.61,0.0,-0.24,-0.88,1.02,0.0,0.0,0.88,0.24,0.0,0.61,0.24,0.0,0.47,0.0,0.0,0.61,-0.24,0.0,0.88,-0.24,0.0,0.72,0.0,-0.72,0.62,0.24,-0.62,0.43,0.24,-0.43,0.33,0.0,-0.33,0.43,-0.24,-0.43,0.62,-0.24,-0.62,0.72,0.0,0.72,0.62,0.24,0.62,0.43,0.24,0.43,0.33,0.0,0.33,0.43,-0.24,0.43,0.62,-0.24,0.62,1.02,0.0,0.0,0.88,0.24,0.0,0.61,0.24,0.0,0.47,0.0,0.0,0.61,-0.24,0.0,0.88,-0.24,0.0")
    for i=1,rings,1 do
        for j=1+vertices*3*(i-1),vertices*3*i,3 do
            local x,y,z=v[j],v[j+1],v[j+2];
            y,z=rotate(y,z,qt*0.9);
            x,z=rotate(x,z,qt*0.3);
            x,y=inf(qt+p,x,y)
            y-=1
            add(vm,x);
            add(vm,y);
            add(vm,z);
            z=z+5;
            x=x*96/z+64;
            y=y*96/z+64;
            vt[j],vt[j+1],vt[j+2]=flr(x),flr(y),flr(z);
        end
    end
    for i=1,rings,1 do
        local x,y,z=0,0,0
        for j=1,vertices*3,3 do
            x+=vm[j*i]
            y+=vm[(j+1)*i]
            z+=vm[(j+2)*i]
        end
        x/=vertices
        y/=vertices
        z/=vertices
        add(order,i)
        add(order,flr(sqrt((0-x)*(0-x)+(0-y)*(0-y)+(-10-z)*(-10-z))*1000))
    end
    order=sort(order)
	local f=split("0,1,6,1,2,7,2,3,8,4,10,3,4,5,10,0,6,5,1,7,6,2,8,7,3,9,8,10,9,3,5,11,10,6,11,5")
    local tc=split("0.0,0.5,1.0,0.33,1.0,0.5,-0.0,0.33,1.0,0.17,-0.0,0.17,1.0,0.0,1.0,1.0,0.0,0.83,1.0,0.83,1.0,0.67,-0.0,0.0,0.0,1.0,0.0,0.67")
    local uv=split("2,1,0,1,4,3,4,6,5,9,8,7,9,10,8,2,0,10,1,3,0,4,5,3,6,11,5,8,12,7,10,13,8,0,13,10")
    for i=1,rings*2,2 do
        local v_r={}
        local vm_r={}
        for j=1+vertices*3*(order[i]-1),vertices*3*order[i] do
            add(v_r,vt[j])
            add(vm_r,vm[j])
        end
	    draw_model(p,qt,vertices,v_r,vm_r,faces,f,tc,uv,{tex},true,16,false,256)
    end
end

function zoom_rotator(p)
	local qt,vertices,planes,faces,zm=t*0.01,4,25,2,22-11*sin(t%10*0.1)
	local v=split("-5.0,5.0,-0.0,5.0,5.0,-0.0,-5.0,-5.0,0.0,5.0,-5.0,0.0,5.0,5.0,-0.0,15.0,5.0,-0.0,5.0,-5.0,0.0,15.0,-5.0,0.0,-5.0,15.0,-0.0,5.0,15.0,-0.0,-5.0,5.0,-0.0,5.0,5.0,-0.0,5.0,15.0,-0.0,15.0,15.0,-0.0,5.0,5.0,-0.0,15.0,5.0,-0.0,-5.0,-5.0,0.0,5.0,-5.0,0.0,-5.0,-15.0,0.0,5.0,-15.0,0.0,5.0,-5.0,0.0,15.0,-5.0,0.0,5.0,-15.0,0.0,15.0,-15.0,0.0,-15.0,5.0,-0.0,-5.0,5.0,-0.0,-15.0,-5.0,0.0,-5.0,-5.0,0.0,-15.0,15.0,-0.0,-5.0,15.0,-0.0,-15.0,5.0,-0.0,-5.0,5.0,-0.0,-15.0,-5.0,0.0,-5.0,-5.0,0.0,-15.0,-15.0,0.0,-5.0,-15.0,0.0,-25.0,5.0,-0.0,-15.0,5.0,-0.0,-25.0,-5.0,0.0,-15.0,-5.0,0.0,-25.0,15.0,-0.0,-15.0,15.0,-0.0,-25.0,5.0,-0.0,-15.0,5.0,-0.0,-25.0,-5.0,0.0,-15.0,-5.0,0.0,-25.0,-15.0,0.0,-15.0,-15.0,0.0,-25.0,25.0,-0.0,-15.0,25.0,-0.0,-25.0,15.0,-0.0,-15.0,15.0,-0.0,-25.0,-15.0,0.0,-15.0,-15.0,0.0,-25.0,-25.0,0.0,-15.0,-25.0,0.0,15.0,5.0,-0.0,25.0,5.0,-0.0,15.0,-5.0,0.0,25.0,-5.0,0.0,15.0,15.0,-0.0,25.0,15.0,-0.0,15.0,5.0,-0.0,25.0,5.0,-0.0,15.0,-5.0,0.0,25.0,-5.0,0.0,15.0,-15.0,0.0,25.0,-15.0,0.0,15.0,25.0,-0.0,25.0,25.0,-0.0,15.0,15.0,-0.0,25.0,15.0,-0.0,15.0,-15.0,0.0,25.0,-15.0,0.0,15.0,-25.0,0.0,25.0,-25.0,0.0,-5.0,25.0,-0.0,5.0,25.0,-0.0,-5.0,15.0,-0.0,5.0,15.0,-0.0,5.0,25.0,-0.0,15.0,25.0,-0.0,5.0,15.0,-0.0,15.0,15.0,-0.0,-15.0,25.0,-0.0,-5.0,25.0,-0.0,-15.0,15.0,-0.0,-5.0,15.0,-0.0,-5.0,-15.0,0.0,5.0,-15.0,0.0,-5.0,-25.0,0.0,5.0,-25.0,0.0,5.0,-15.0,0.0,15.0,-15.0,0.0,5.0,-25.0,0.0,15.0,-25.0,0.0,-15.0,-15.0,0.0,-5.0,-15.0,0.0,-15.0,-25.0,0.0,-5.0,-25.0,0.0")
    local f,tc,uv=split("0,2,1,2,3,1"),split("1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0"),split("2,1,0,1,3,0")
    for i=1,planes,1 do
        local v_r=""
        for j=1+vertices*3*(i-1),vertices*3*i,3 do
            local x,y,z=v[j],v[j+1],v[j+2];
            z-=zm
            x,y=rotate(x,y,qt);
            z+=5;
            x=x*96/z+64;
            y=y*96/z+64;
            v_r=v_r..flr(x+0.5)..","..flr(y+0.5)..","..flr(z+0.5)..","
        end
        v_r=split(sub(v_r,1,-2))
        local xc,yc=64-(v_r[1]+v_r[4]+v_r[7]+v_r[10])/4,64-(v_r[2]+v_r[5]+v_r[8]+v_r[11])/4
        if((xc*xc+yc*yc)<22000)then
    	    draw_model(p,qt,vertices,v_r,v_r,faces,f,tc,uv,{tex},false,128,true,16384) 
        end
    end
end

function draw_cube_anim(p)
    local textures,qt,vertices,faces,vt,vm=draw_plasmas(),t*0.01,8,12,"",""
	local v=split("1.3,1.3,-1.3,1.3,-1.3,-1.3,1.3,1.3,1.3,1.3,-1.3,1.3,-1.3,1.3,-1.3,-1.3,-1.3,-1.3,-1.3,1.3,1.3,-1.3,-1.3,1.3")
	local f=split("0,2,4,3,7,2,7,5,6,5,7,1,1,3,0,5,1,4,2,6,4,7,6,2,5,4,6,7,3,1,3,2,0,1,0,4")
    local tc=split("1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0")
    local uv=split("2,1,0,2,1,0,1,3,2,0,2,3,2,1,0,1,3,2,1,3,0,1,3,0,3,0,2,2,1,3,1,3,0,3,0,2")
    for j=1,vertices*3,3 do
        local x,y,z=v[j],v[j+1],v[j+2];
        y,z=rotate(y,z,qt);
        x,z=rotate(x,z,qt*1.5);
        vm=vm..x..","..y..","..z..","
        z=z+5;
        x=x*96/z+64;
        y=y*96/z+64;
        vt=vt..x..","..y..","..z..","
    end
    vm,vt=split(sub(vm,1,-2)),split(sub(vt,1,-2))
    draw_model(p,qt,vertices,vt,vm,faces,f,tc,uv,textures,true,32,false,1024)
end

function v3_len(vec)
    return sqrt(vec[1]*vec[1]+vec[2]*vec[2]+vec[3]*vec[3])        
end

function inf(t,x,y)
	x+=2*(cos(t))
	y+=2*cos(t)*sin(t)
    return x,y
end

function background()
    spr(0,0,0,16,16)
end

function mirror()
    for i=0,40,1 do
        for j=0,64,1 do
            poke(0x7fc0-i*64+j,@(0x6000+i*128+j+448))
        end
    end
end

-- t=0
-- function _update()
--     t+=1
-- end

-- function _draw()
--     cls()
--     -- bridge2()
--     -- spr(0,0,0,16,16)
--     -- zoom_rotator(0)
--     -- draw_cube_anim()
--     -- draw_chicken()
--     -- mirror()
--     -- print(stat(9))
--     draw_amiga_ball(0)
-- end

function draw_chicken(p)
	local qt,vertices,faces,vt,vm,order=t*0.01,split("5,20,27,14,21,21"),split("4,28,36,20,36,36"),{},{},""
	local v={split("-0.82,1.89,0.0,-1.18,1.89,0.0,-0.81,2.11,0.0,-0.74,1.89,0.14,-0.74,1.89,-0.14")
            ,split("-0.38,2.73,0.0,-0.72,2.44,0.0,-0.04,2.82,0.0,0.35,2.57,0.0,-0.42,2.47,0.42,-0.09,2.54,0.51,0.24,2.57,0.29,0.46,1.76,0.54,-0.48,1.86,0.54,0.04,1.84,0.68,0.52,2.08,0.0,-0.81,2.11,0.0,-0.74,1.89,0.14,-0.42,2.47,-0.42,-0.09,2.54,-0.51,0.24,2.57,-0.29,0.46,1.76,-0.54,-0.48,1.86,-0.54,0.04,1.84,-0.68,-0.74,1.89,-0.14")
            ,split("-1.12,1.07,0.0,-0.66,0.96,0.71,0.15,0.82,0.99,-0.54,-0.81,0.0,-1.17,0.03,0.0,0.03,-1.0,0.0,-0.59,-0.22,0.8,0.03,-0.5,1.09,0.76,1.35,0.0,0.91,0.55,1.01,1.13,-0.33,0.9,0.46,1.76,0.54,-0.82,1.89,0.0,-0.48,1.86,0.54,0.04,1.84,0.68,0.52,2.08,0.0,-0.74,1.89,0.14,-0.66,0.96,-0.71,0.15,0.82,-0.99,-0.59,-0.22,-0.8,0.03,-0.5,-1.09,0.91,0.55,-1.01,1.13,-0.33,-0.9,0.46,1.76,-0.54,-0.48,1.86,-0.54,0.04,1.84,-0.68,-0.74,1.89,-0.14")
            ,split("0.76,1.35,0.0,1.82,1.0,0.0,2.26,0.51,0.0,0.91,0.55,1.01,1.82,0.51,0.57,1.41,-0.65,0.0,1.13,-0.33,0.9,2.23,1.31,0.0,1.98,-0.11,0.0,1.59,0.04,0.69,0.91,0.55,-1.01,1.82,0.51,-0.57,1.13,-0.33,-0.9,1.59,0.04,-0.69")
            ,split("0.03,-1.0,0.0,1.41,-0.65,0.0,0.03,-0.5,-1.09,1.13,-0.33,-0.9,0.77,-1.55,-0.56,0.77,-1.55,-0.75,0.96,-1.55,-0.56,0.96,-1.55,-0.75,0.77,-1.99,-0.51,0.77,-1.99,-0.8,0.96,-1.99,-0.56,0.96,-1.99,-0.75,0.77,-1.86,-0.56,0.96,-1.86,-0.56,0.77,-1.86,-0.75,0.96,-1.86,-0.75,0.77,-1.99,-0.66,0.96,-1.86,-0.66,0.07,-1.99,-0.47,0.07,-1.99,-0.84,1.26,-1.99,-0.66")
            ,split("0.03,-1.0,0.0,0.03,-0.5,1.09,1.41,-0.65,0.0,1.13,-0.33,0.9,0.77,-1.55,0.56,0.77,-1.55,0.75,0.96,-1.55,0.56,0.96,-1.55,0.75,0.77,-1.99,0.51,0.77,-1.99,0.8,0.96,-1.99,0.56,0.96,-1.99,0.75,0.77,-1.86,0.56,0.96,-1.86,0.56,0.77,-1.86,0.75,0.96,-1.86,0.75,0.77,-1.99,0.66,0.96,-1.86,0.66,0.07,-1.99,0.47,0.07,-1.99,0.84,1.26,-1.99,0.66")}
	local f={split("1,2,3,0,1,3,2,1,4,1,0,4")
            ,split("6,2,3,4,0,5,1,0,4,5,2,6,6,3,10,5,6,9,11,4,12,4,5,8,4,11,1,0,2,5,7,6,10,6,7,9,4,8,12,5,9,8,2,15,3,0,13,14,0,1,13,2,14,15,3,15,10,15,14,18,13,11,19,14,13,17,11,13,1,2,0,14,15,16,10,16,15,18,17,13,19,18,14,17")
            ,split("3,4,6,6,7,3,1,2,6,13,1,16,10,7,9,13,14,1,14,11,2,11,15,8,0,1,4,12,16,0,7,5,3,2,7,6,7,2,9,14,2,1,11,9,2,9,11,8,1,6,4,16,1,0,4,3,19,20,19,3,18,17,19,17,24,26,20,22,21,25,24,17,23,25,18,15,23,8,17,0,4,26,12,0,5,20,3,20,18,19,18,20,21,18,25,17,21,23,18,23,21,8,19,17,4,17,26,0")
            ,split("7,2,4,9,6,3,9,4,8,7,4,1,3,0,4,6,9,5,3,4,9,4,2,8,0,1,4,9,8,5,2,7,11,12,13,10,11,13,8,11,7,1,0,10,11,13,12,5,11,10,13,2,11,8,1,0,11,8,13,5")
            ,split("4,5,0,13,10,12,2,5,3,6,4,1,7,6,3,14,12,16,9,11,14,13,6,17,7,17,6,5,14,7,4,12,5,13,12,6,15,17,7,11,17,15,17,10,13,18,16,12,19,14,16,20,11,10,16,11,9,16,8,10,16,10,11,18,8,16,18,12,8,19,9,14,19,16,9,20,10,17,20,17,11,5,2,0,10,8,12,5,7,3,4,0,1,6,1,3,11,15,14,14,15,7,12,14,5,12,4,6")
            ,split("5,4,0,10,13,12,5,1,3,4,6,2,6,7,3,12,14,16,11,9,14,6,13,17,17,7,6,14,5,7,12,4,5,12,13,6,17,15,7,17,11,15,10,17,13,16,18,12,14,19,16,11,20,10,11,16,9,8,16,10,10,16,11,8,18,16,12,18,8,9,19,14,16,19,9,10,20,17,17,20,11,1,5,0,8,10,12,7,5,3,0,4,2,2,6,3,15,11,14,15,14,7,14,12,5,4,12,6")}
    local tc={split("0.5,0.11,0.49,0.07,0.39,0.08,0.46,0.13")
            ,split("0.36,0.95,0.28,0.96,0.32,0.91,0.27,0.88,0.21,0.95,0.23,0.88,0.15,0.9,0.43,0.89,0.31,0.77,0.12,0.8,0.12,0.85,0.21,0.78,0.39,0.78")
            ,split("0.2,0.4,0.02,0.45,0.09,0.25,0.32,0.33,0.34,0.58,0.19,0.61,0.12,0.8,0.21,0.78,0.49,0.54,0.53,0.37,0.31,0.77,0.39,0.78,0.53,0.78,0.43,0.89,0.03,0.65,0.09,0.81,0.16,0.17")
            ,split("0.67,0.54,0.8,0.54,0.8,0.67,0.49,0.54,0.53,0.37,0.62,0.44,0.76,0.4,0.7,0.66,0.52,0.76,0.69,0.27")
            ,split("0.16,0.17,0.4,0.2,0.37,0.16,0.86,0.88,0.81,0.93,0.81,0.88,0.53,0.37,0.32,0.34,0.69,0.27,0.56,0.11,0.56,0.15,0.5,0.2,0.65,0.92,0.62,0.89,0.67,0.89,0.73,0.92,0.67,0.93,0.78,0.89,0.81,0.79,0.74,0.79,0.67,0.79,0.62,0.79,0.73,0.87,0.86,0.46,0.82,0.45,0.82,0.3,0.88,0.54,0.91,0.54,0.88,0.66,0.9,0.3,0.93,0.3,0.93,0.37,0.93,0.25,0.89,0.26,0.88,0.25,0.85,0.17,0.89,0.46,0.93,0.57,0.92,0.19,0.19,0.08,0.17,0.11,0.13,0.06,0.18,0.04,0.86,0.93,0.73,0.03,0.86,0.79")
            ,split("0.16,0.17,0.37,0.16,0.4,0.2,0.86,0.88,0.81,0.88,0.81,0.93,0.53,0.37,0.32,0.34,0.69,0.27,0.56,0.15,0.56,0.11,0.5,0.2,0.65,0.92,0.67,0.89,0.62,0.89,0.67,0.93,0.73,0.92,0.78,0.89,0.81,0.79,0.74,0.79,0.68,0.79,0.62,0.79,0.73,0.87,0.86,0.46,0.82,0.3,0.82,0.45,0.88,0.54,0.88,0.66,0.91,0.54,0.9,0.3,0.93,0.37,0.93,0.3,0.93,0.25,0.89,0.26,0.88,0.25,0.85,0.17,0.89,0.46,0.93,0.57,0.92,0.19,0.19,0.08,0.13,0.06,0.17,0.11,0.18,0.04,0.86,0.93,0.73,0.03,0.86,0.79")}
    local uv={split("2,1,0,3,2,0,1,2,0,2,3,0")
            ,split("2,1,0,5,4,3,6,4,5,3,1,2,2,0,7,3,2,8,10,5,9,5,3,11,5,10,6,4,1,3,12,2,7,2,12,8,5,11,9,3,8,11,1,2,0,4,5,3,4,6,5,1,3,2,0,2,7,2,3,8,5,10,9,3,5,11,10,5,6,1,4,3,2,12,7,12,2,8,11,5,9,8,3,11")
            ,split("2,1,0,0,3,2,5,4,0,7,5,6,9,3,8,7,10,5,10,11,4,11,13,12,14,5,1,15,6,14,3,16,2,4,3,0,3,4,8,10,4,5,11,8,4,8,11,12,5,0,1,6,5,14,1,2,0,3,0,2,4,5,0,5,7,6,3,9,8,10,7,5,11,10,4,13,11,12,5,14,1,6,15,14,16,3,2,3,4,0,4,3,8,4,10,5,8,11,4,11,8,12,0,5,1,5,6,14")
            ,split("2,1,0,5,4,3,5,0,6,2,0,7,3,8,0,4,5,9,3,0,5,0,1,6,8,7,0,5,6,9,1,2,0,4,5,3,0,5,6,0,2,7,8,3,0,5,4,9,0,3,5,1,0,6,7,8,0,6,5,9")
            ,split("2,1,0,5,4,3,7,1,6,10,9,8,11,10,6,14,13,12,16,15,14,5,18,17,19,17,18,20,14,19,21,13,20,5,3,18,22,17,19,15,17,22,17,4,5,25,24,23,28,27,26,31,30,29,33,30,32,33,34,29,33,29,30,35,34,33,25,23,36,28,37,27,38,33,32,41,40,39,41,39,42,1,7,0,4,43,3,1,11,6,9,44,8,10,8,6,15,22,14,14,22,19,13,14,20,3,45,18")
            ,split("2,1,0,5,4,3,2,7,6,10,9,8,9,11,6,14,13,12,16,15,13,18,4,17,17,19,18,13,20,19,14,21,20,3,4,18,17,22,19,17,16,22,5,17,4,25,24,23,28,27,26,31,30,29,31,33,32,34,33,29,29,33,31,34,35,33,23,24,36,37,27,28,33,38,32,41,40,39,39,40,42,7,2,0,43,5,3,11,2,6,44,10,8,8,9,6,22,16,13,22,13,19,13,14,20,45,3,18")}
    for i=1,#vertices do
        vt[i],vm[i]="",""
        for j=1,vertices[i]*3,3 do
            local x,y,z=v[i][j],v[i][j+1],v[i][j+2];
            y,z=rotate(y,z,qt);
            x,z=rotate(x,z,qt*1.5);
            vm[i]=vm[i]..x..","..y..","..z..","
            z=z+5;
            x=x*96/z+64;
            y=y*96/z+64;
            vt[i]=vt[i]..flr(x)..","..flr(y)..","..flr(z)..","
        end
        vt[i],vm[i]=split(vt[i]),split(vm[i])
    end
    for i=1,#vertices do
        local x,y,z=0,0,0
        for j=1,vertices[i]*3,3 do
            x+=vm[i][j]
            y+=vm[i][(j+1)]
            z+=vm[i][(j+2)]
        end
        x/=vertices[i]
        y/=vertices[i]
        z/=vertices[i]
        order=order..i..","..flr(sqrt((0-x)*(0-x)+(0-y)*(0-y)+(-10-z)*(-10-z))*1000)..","
    end
    order=sort(split(sub(order,1,-2)))
    for i=1,#vertices*2,2 do
        draw_model(p,qt,vertices[order[i]],vt[order[i]],vm[order[i]],faces[order[i]],f[order[i]],tc[order[i]],uv[order[i]],{chicken_tex},true,32,false,1024)
    end
end

ball_x,ball_y,x_speed,y_speed,ball_r,g,b,shadow_x,shadow_y=-1,-1,0.1,0.2,1,0.2,1,0,0
function draw_amiga_ball(p)
    rectfill(0,0,127,127,5)
    for i=0,10 do
        f=14+i*10
        line(0+f,5,0+f,105,6)
        line(14,f-9,114,f-9,6)
        line(0+f,105,0+flr(i*12.8+0.5),120,6)
        line(10,109,117,109,6)
        line(7,114,122,114,6)
        line(0,120,127,120,6)
    end
	local qt,vertices,faces=t*0.01,62,120
	local v=split("0.0,0.5,-0.87,0.0,-0.5,-0.87,0.25,0.87,-0.43,0.43,0.5,-0.75,0.5,0.0,-0.87,0.43,-0.5,-0.75,0.25,-0.87,-0.43,0.43,0.87,-0.25,0.75,0.5,-0.43,0.87,0.0,-0.5,0.75,-0.5,-0.43,0.43,-0.87,-0.25,0.5,0.87,0.0,0.87,0.5,0.0,1.0,0.0,0.0,0.87,-0.5,0.0,0.5,-0.87,0.0,0.43,0.87,0.25,0.75,0.5,0.43,0.87,0.0,0.5,0.75,-0.5,0.43,0.43,-0.87,0.25,0.25,0.87,0.43,0.43,0.5,0.75,0.5,0.0,0.87,0.43,-0.5,0.75,0.25,-0.87,0.43,0.0,0.87,0.5,-0.0,0.5,0.87,0.0,0.0,1.0,-0.0,-0.5,0.87,0.0,-0.87,0.5,0.0,1.0,0.0,-0.25,0.87,0.43,-0.43,0.5,0.75,-0.5,0.0,0.87,-0.43,-0.5,0.75,-0.25,-0.87,0.43,0.0,-1.0,0.0,-0.43,0.87,0.25,-0.75,0.5,0.43,-0.87,0.0,0.5,-0.75,-0.5,0.43,-0.43,-0.87,0.25,-0.5,0.87,0.0,-0.87,0.5,-0.0,-1.0,0.0,0.0,-0.87,-0.5,-0.0,-0.5,-0.87,0.0,-0.43,0.87,-0.25,-0.75,0.5,-0.43,-0.87,0.0,-0.5,-0.75,-0.5,-0.43,-0.43,-0.87,-0.25,-0.25,0.87,-0.43,-0.43,0.5,-0.75,-0.5,0.0,-0.87,-0.43,-0.5,-0.75,-0.25,-0.87,-0.43,0.0,0.87,-0.5,0.0,0.0,-1.0,0.0,-0.87,-0.5")
	local f=split("6,61,38,1,5,60,0,3,59,61,6,1,60,4,0,2,32,59,3,8,2,6,11,5,4,9,3,7,32,2,11,6,38,5,10,4,11,16,10,9,14,8,12,32,7,16,11,38,15,14,10,13,12,8,16,21,15,14,19,13,17,32,12,21,16,38,15,20,14,13,18,12,21,26,20,19,24,18,22,32,17,26,21,38,20,25,19,18,23,17,26,31,25,24,29,23,27,32,22,31,26,38,30,29,25,23,28,22,29,35,28,33,32,27,37,31,38,36,35,30,34,33,28,31,37,30,39,32,33,43,37,38,36,42,35,34,40,33,37,43,36,35,41,34,48,43,38,47,46,42,40,45,39,43,48,42,41,46,40,44,32,39,53,48,38,52,51,47,50,49,45,48,53,47,46,51,45,49,32,44,58,53,38,52,57,51,50,55,49,53,58,52,51,56,50,54,32,49,57,1,56,55,0,54,58,61,57,56,60,55,59,32,54,61,58,38,5,4,60,3,2,59,6,5,1,4,3,0,8,7,2,11,10,5,9,8,3,10,9,4,16,15,10,14,13,8,14,9,10,12,7,8,21,20,15,19,18,13,20,19,14,18,17,12,26,25,20,24,23,18,25,24,19,23,22,17,31,30,25,29,28,23,29,24,25,28,27,22,35,34,28,35,29,30,33,27,28,37,36,30,42,41,35,40,39,33,43,42,36,41,40,34,46,41,42,45,44,39,48,47,42,46,45,40,51,46,47,49,44,45,53,52,47,51,50,45,57,56,51,55,54,49,58,57,52,56,55,50,1,60,56,0,59,54,61,1,57,60,0,55")
    local tc=split("0.06,0.88,0.07,0.12,0.43,0.12,0.43,0.88,0.57,0.12,0.93,0.88,0.57,0.88,0.93,0.12")
    local uv=split("2,1,0,0,3,1,0,3,1,6,5,4,6,5,4,4,6,7,6,5,4,0,3,1,0,3,1,1,0,2,7,4,6,7,4,5,6,5,4,6,5,4,4,6,7,2,1,0,3,2,0,3,2,0,0,3,1,0,3,1,1,0,2,7,4,6,6,5,4,6,5,4,6,5,4,6,5,4,4,6,7,2,1,0,0,3,1,0,3,1,0,3,1,0,3,1,1,0,2,7,4,6,5,7,6,6,5,4,6,5,4,4,6,7,2,1,0,3,2,0,3,2,0,6,5,4,1,0,2,7,4,6,6,5,4,6,5,4,0,3,1,0,3,1,2,1,0,3,2,0,0,3,1,6,5,4,6,5,4,4,6,7,7,4,6,5,7,6,5,7,6,0,3,1,0,3,1,1,0,2,2,1,0,0,3,1,0,3,1,6,5,4,6,5,4,4,6,7,6,5,4,6,5,4,0,3,1,0,3,1,1,0,2,7,4,6,3,2,1,3,2,1,5,7,4,5,7,4,5,7,4,3,2,1,3,2,1,4,6,5,5,7,4,5,7,4,2,1,0,2,1,0,3,2,1,3,2,1,5,7,4,5,7,4,5,7,4,5,7,4,3,2,1,3,2,1,3,2,1,3,2,1,7,4,6,5,7,4,5,7,4,2,1,0,2,1,0,5,7,4,5,7,4,5,7,4,3,2,1,3,2,1,2,1,0,3,2,1,5,7,4,5,7,4,7,4,6,7,4,6,3,2,1,3,2,1,3,2,1,3,2,1,5,7,4,5,7,4,5,7,4,5,7,4,3,2,1,3,2,1")
    vt,vm="",""
    ball_x+=x_speed 
    ball_y+=y_speed
    if ball_y+ball_r>2.5 then
        ball_y=2.5-ball_r
        y_speed=-y_speed*b
        sfx(12,0,0,5)
    end 
    if ball_y-ball_r<-3 then
        ball_y=-3+ball_r
        y_speed=-y_speed*b
        sfx(12,0,0,5)
    end
    if ball_x-ball_r<-2.5 then
        ball_x=-2.5+ball_r
        x_speed=-x_speed*b
        sfx(12,0,0,5)
    end
    if ball_x+ball_r>2.5 then
        ball_x=2.5-ball_r
        x_speed=-x_speed*b
        sfx(12,0,0,5)
    end
    for j=1,vertices*3,3 do
        local x,y,z=v[j],v[j+1],v[j+2];
        x,z=rotate(x,z,qt*1.5);
        x,y=rotate(x,y,-0.05);
        x,y,z=translation(x,y,z,ball_x,ball_y,0)
        vm=vm..x..","..y..","..z..","
        z=z+5;
        x=x*96/z+64;
        y=y*96/z+64;
        vt=vt..x..","..y..","..z..","
    end
    vm,vt=split(sub(vm,1,-2)),split(sub(vt,1,-2))
    for i=1,#vt,3 do 
        shadow_x+=vt[i]
        shadow_y+=vt[i+1]
    end
    shadow_x=flr(shadow_x/vertices+0.5)+5
    shadow_y=flr(shadow_y/vertices+0.5)+5
	for y=-shadow_r,shadow_r do
		for x=-shadow_r,shadow_r do
			local off = ball_shadow[(y+shadow_r)*shadow_size+x+shadow_r]
			if(off==1)then
				color=pget(shadow_x+x,shadow_y+y)
                if(color==13)then color=6 end
                pset(shadow_x+x,shadow_y+y,color+7)
			end
		end
	end
    draw_model(p,qt,vertices,vt,vm,faces,f,tc,uv,{amiga_ball_texture},false,8,true,64)
end

function sort(seq)
    for i=1,#seq,2 do
        local max=i+1
        for j=i,#seq,2 do
            if(seq[max]<=seq[j+1]) then
                max=j+1
            end
        end
        tmp=seq[i+1]
        seq[i+1]=seq[max]
        seq[max]=tmp
        tmp=seq[i]
        seq[i]=seq[max-1]
        seq[max-1]=tmp
    end
    return seq
end

function draw_plasmas()
    local plasmas={"","","","","",""}
	for x=0,31,1 do
		for y=0,31,1 do
			c=tostr(((
				16+(16*sin(x*0.016+sin(t*0.001)))+
				16+(16*sin(y*0.008+sin(t*0.001)))+
				16+(16*sin(sqrt((x-63)%2*(x-63)%2+(y-63)%2*(y-63)%2)*0.016+sin(t*0.01)))+
				16+(16*sin(sqrt(x*x+y*y)*0.004+sin(t*0.01)))
			)*0.25+t)%6,true)[6]
            for i=1,6,1 do
                plasmas[i]=plasmas[i]..tostr(c+((i-1)*2),true)[6]  
            end
		end
	end
    return plasmas
end

function bridge2()
    background()
    draw_torus(0)
    mirror()    
end

function bridge1()
    background()
    for i=0,5 do
        draw_cube(i*0.1)
    end
    mirror()      
end
__gfx__
3131313131313131313131313131313131313131313131313131313131313131313131313113dd6666666666d13131313d66677766dd666dd313131313131313
1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c131cdc666767777767c3c1c1c1c66777777777667dc131c1c1c1c1c1c1
31113111311131113111311131113111311131113111311131113111311131113111111cd66666767667677776d3131c6677777777777766d31c111311131113
1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c13c1c1366766666767767676776cd6d667777777777777776c113c11c31c1c11
3131113111311131113111311131113111311131113111311131113111313111c113dc66767776666767776776776677777777777777777766c111c11c1131c3
131c1c31c1c13c11c31c1c31c1c13c11c31c1c31c1c13c11c31c1c31c1c11c331c3cd677676767667676767676766767777777777777777777d31311311c1311
3c11311c1311c11c11c1111c1311c11c11c1111c1311c11c11c1111c1311c11cdddd67676767676767677777676767777777777777777777766c1c1c1c113c13
11c11c1131c113113113c1311c1313113113c1311c1313113113c1311c131311cd677767767676766676676777767677777777777777777776ddc531113c11c1
c11c3131c311c1c1c1c11c1c11c1c1c1c1c11c1c11c1c1c1c1c11c1c11c1c1cd666776766767676776677676767676777777777777777777666d1c1c3c113113
11311c1c111c13131131311313111313113131131311131311313113131113dd6777676777676767677667676777677777777777777777776666cdc31131c1c1
3c1c11313c313c1c1c1c1c3c1c1c3c1c1c1c1c3c1c1c3c1c1c1c1c3c1c1c3cdc6776767676767676767776767667767777777777777777777766ddd1c1c13131
1313c1c111c31131313131113131c131c13131113131113131313111313113d6677777676767676777777777676677677777777777777777777666cd313c1c1c
c1c11313c3ddc3cc1c1cdc3cdcc31dc31c1c1c3c1c1c3c1c1c1c1c3c1c1c1c67777776767776777777777777777766777777777777777777777776dcdc113131
1c13c1ccdcdcdc1131c666666ddcdc31c331c311c131c131c131c311c31c3d6777767777776776777777777777676776777777777777777777777665c1c3c1c3
313c1cdddd66ddc3cd6677777766dddcd1c131c31c1c13c133c131c31c3dcd777777777777777777677777777777776777777777777777777777777c33113c11
c3cdd6d6666666ddd677667677766cddcd3c1c1c31c1c13c1c1c1c1c1dc1d677766dd5d5ddd7777777777777777777776777777777677677777777776cc313c3
311c6666666666666676776766777666dcddc1331c3331c1c131c331c3dc6766d11101011101d7777777777777777777767677777777777777677767776dcc1d
1cc66667766667676766766767676666cd3c13c1c31c1c1313cc31dc3dcd6dd1353552253531116777777777777777777767777677777776777777777766d1c3
3dd6667666766666767676767676766cddc13c1c1c1c3c3cc131cc3cddddd5555553555551111005677777777777777777776777777777777777777777776cd3
cd666776766676666667676767667666dcdc1c33c1c1d1c13cd31d3ddddd342225311131111131101d77777777777777776777777677677777777777777776cd
3c66767666766676767676767667666c6d3dc5cd3d3c3c3dc31cc3cddd35555000051054011111531017777777777777777777677777777777777777777776dd
367777676766766666766767667666666cdcdcdc1c3d3d1c31cc13ddd3202005440544444501013151017777777777777767677767677777777777777777776c
c6776676667666767667767676666666666dd3d3c3c1c3c1cd31cddd30000044a44544494445015500501677777777777677776777767777777777777777776d
d7777667766767666766676667676666666c6cdcdd3c1c3d3cd3cdd3110000444af4594444940011005101777777777777676776767767677777777777777776
d77777766766766666676677666666666666666ddcd3cdc3c3cddd510044440554445f4a4544455000010017777777777676776767676777777777777777777d
6777676676676676666667676666666666666666c33cd31cdd3de5310449fa444444444454a90544501011017777777777777677777776767777777777777766
67777777677666666666667767666666666666676cd3cdc3cccd5510044a44444450555544415454400011005777777776776776767677676676777777777766
677677677666666666666767766666666767667666cd3cd3555d310059f4a5445544545045504545545000100d77777777777777777767667666667677776766
677767777666666666666777677676766666767676dcdc3de944310594f444005f664d4455550254050500010077777677677676767676776667666667677676
6777777766666c666666677677676666766766767663c3dff444104ada44505fffd44d4554444450502500100067777777777777776776766766676766676666
6776776766666666c66667776767676666666767766cd36744242544445456ff6d4dd4554555d544505050001067777776776776767667667667666667666666
6677777766c6666666666677777676666666667676cdcd6f44044444504677ffffd44d45545454dd4402001000d7777777777777776766766766676766766666
c76767776666666666c6666767676666c6666667666c3d7fe444444454777fffddad545455454d454d40400110d7777677777676767677667667666676676666
d6767676766666c666666c666676666666666676766dd77494422444d77777fdfedd4d455454d4d4d4d4501000d7776776767777676766676676667666776766
66666666666666666666666c6666666c6666666776d777ee40044444f7777fffd4d4d455455d454d454d05005067777667676767767667666666676676767667
c6676666666c6666c6c6c6666c66c666666666766667f6a4004f4444677777f6ffd445455445d4d454d450202214676766666676676666666666666666667766
dc66766c6c66cdcd66666d6c66c666666c66676766dff4444fe42444777777fffdfd4d5455d4d4d4d54550202420067676767667666766666666666666666677
dc6666c6cd6c6666c6cd6c6666666c6c666666776ccdf44f77f4294477777fffdad4d5455444d4d454d500200442067667676666667666666666666666666666
cdcc6cdcd6c66c666d66c66c666c66666c6667776dcde94efe454446777777f6fdd4d4d44d5d4d454d4504002220076766666766666666666666666666666666
dcdcdcdccd6c66c6c6c66d666c66c6cc66c66776cdcdff444444994477f6f7ffffdf4d45544d4d4d545502400002d76676766676666666666666666666666666
cdcdcdcddccdc666666c6c6c66c66c6ddc6c6c66cdcdf69454944a56765445546ffdd4d4d5d464d44d4020220405766666667666666666666666666666666666
cdcdcdcdccd6666c6c66c6c6dc6dcddcccdcdcdcdcdcdd6f4494a9d77fffd5005546ad4d4d4d4d4d554502200225666666666666666666666666666666666666
dc6cdc6cd6c6c6c66cdcddcdcdccdcc6d6cdcdcdc6cdccfa444496777fd45500005f5d4d4555555454d5000202057666666666666666666666666666666666c6
cdcdcdcdcdcd6c6c66c6c6cc6cdc6dcdcdc6c6c6cdc6cd4994614777d55100000255445450005555554540050044666666666666666666666666666666666666
c6c6c6c6c6c6c66dcc6c6cddd6cdcc6c6cdcdcdcdcdcdccddd406777656d01d40545d4dd02020254544500405494c667666666666666666c6666666666666666
6cdcdcdcdcdc6cd3d6cddd6bd3d6c6cdc6c6c6c6c6c6c66cc6406777766d1d6600dd4545200000005d64050044d6c6c66766666c666666c666666666666666c6
cd6c6c6c6c6cdddddbddbddddddcddc6cdcdcdcdcd6cdcc6d770d77f7764d550047765d000d501dd004505054dcc6c6c666666c6ccccc66c6c666666666c6c6c
6c6cd6c6cdc6c6bddddddbddbdbdd6dc6c6c6c6c6cdc6dccd675477fffdd4552567764452045166555df525056c6cdc6cc6cc6c66d66ccc666666666cc66c6c6
c6c6c6cdc6c6cdddd6bdddbddddbdbd5d6c6c6c6c6c6c66cd6766777ffd4dd54df77d5dd4555dd55d54e025d6c6c6c6cd6cc6c6ccccc6d6cccc6c6c66c6c6c6c
6c6c6c6c66c6c6ddbdddbdddbd5d5ddbd36c6c6c6c6c6cc6c677777ff64d4d4df777d4d4d55555544546054dccdc6c6c6cd66cdc666d6c6c6666c6c6c6c6c6c6
c6c6c6c6cc6c6cdbdddddd5dd5d5d35dd6c6c6c6c6c6c66c6d67f77f6ed4d4dff77745464d45454554640446c666c6c6c6c6c6c6ccc6c6c6cccc6c6c6c6c6c6c
6c6c6c6c66c6c6dddbdbd5dbd5bd5d5dbdd6c6c6c6c6c6c6ccd4677fe644ddfff777d4ddf4d45454d4d55dfd6cc6c6c6c6c6c66c666c6c6c666c6c6c6c6c6c66
c6c6c6c66c6c66bddddd535d5d5353d5dbd36c6c6c6c6c6c665267f6fd4d4ff6f77fd4fd4d4d4d4d4de54f66c66c66d6d66c6cc66cc6c6c6c6c6c6c6c6c6c6cc
6c6c66c6c6c66cdddbd535d3d355d53d5dd5d6c666c6c6c66c35777fd4d4d4de777d45d4d4d44d4d4d44d4dbd5355333533dd6d6c66c6c6c6c6c666c66c66c66
66c6c66c6c6cc6dbdd53d53d55d353d53d536c6cc66d6dddcd15677e4d454d4dfff555454d44d4d4d4dd45355355355555553353535dd666c666cc66c66c66c6
c66c6c66c666635d53555d5353555535d356c66dd3353353531567f664d455dd05d4055554d4544d4d45555555355151315155555535333553d3ddbd6c66c6c6
66c66c6c66cc665355535c66d53535d35dc6653355555555551167ffdd4d55ffd450205555554d444505553535551515553551513555555355555555355bdd66
6c66c6c66c666c6553dddddcd5dd5535ddd53355535353535311d77ff45455f6f655545455555455d50553555151553515151535551535555353535555555353
6c6c6666c66c66cdd66cd355535355553535555555555555d51157f6edd5477f7d045dd455555554501155535535355153553551515355355555555355355555
6666c6cdd3d3355333553535155535355553553535355353d513177fdf40d777765dd4dd45525544511351515151515555155155355555553535535555553d55
6cd535313515153555355553513555535355355555535555d5150d7ffdd542152525554d05555555015153553555155315535535553535355553555535355535
53135115513535151515353551553535555555535355535353550177f65ff24420000000554554511115551515353515531555553555555535555535555d35d5
15151351355151535353555510535555353535355553551dd153106766df6f484220220255555550115315535515553555553535553553555535535535555535
531351515135353515151353555535355555555535553515355511f67f6666d00020024545524501135553511351115131315151355355353553555553535555
00000000000000001000100000001001000010101010101d51d5017f6fde6e6fd252455555555011511150010000000000000001001001010110111150501111
45454554554545545555455455555455555555554555455311d31577ddf666777645555525541135111355454545d4d54d4d4d55455454545454555555555555
dd6d6dfdfd66dfd6dfdfdf666f6fd66e6fdfdf6fdf6fdf5551d10577fddf6ff76d5545555554115111111df66666adfdfd646dfdfdfd6dfdfdfdf4fdadfdf4fd
da4adafada4a4aafa4a4adafa6a6afa6afafadafada6af5d31310d777fd4666fd4555552554d105101053da4a4ad6adadaa6aada6adaa6adaadadadadadadada
fffffff6affdfdd46f6f6afdf4f4f6fa6ff6faf4fada6f5d515dd677f7f64fdd5545555554541113001154f6dada4dadaddad6a6a6afda6ad6a6a6a6a6a6a6a6
fffffa49d44a4a4a44ada4dada6af4a6a6afa6a6a6fa6a5d505766ff7f7f655400555255454d501110013da4add4dad4dadada6464fda6a6fadadadfdadaddad
fa6a4dadadadadada64f46a6a6464f6ffff6ff6fffa6ffd3317766f77f6fffd5525055455d55d5110015146dda4ad44ad4d4ad4a6a6a646adfa6f6ada6adaada
ff46adf4f464d464dada6adadafa6afada6a6afadf6ada551d7666f7f7f667f45544545454d45d5030035aa4add5a5d54a5d4da54dada64fadfada6ada6adf6d
6af46adada4afada4f464df4fdfdafdffda6a6f6a6afff50577766677f7ffff5555555554d4555551011556d544554445544545d54545adadadda646a646adaa
afdaf4f464fd4da464f4af4ada4af4fa6af4fffaffa6fa1177776d46f76f66fd5454d454d455515510115d44545545555455a545ad4d4d4d6a6ada6a646adafd
fdad4ada4ada4ada4adad4fdadfdf6ada6ffada6fa6afa5777766dddf7f6ff7d4555455d5d5015555013545545445a5a545a55a5545a5ada4646a646a6adfdad
faea64adf4adf4fdadada6964ada4adf4f4f6a6adff6ad77777666d4d6f66ff455455454540555555105554555555555455545544d45d54dadada6adadfadada
faf4fada4fdada4ada4f4ad9fdafdfda6af4fdadfa4ad7777777dd6d54dde66555d45d554055dd55551134554545454555445445a5a5a5a454da4dadadada6a6
af4fa4f4f4ada464f4da4fdad9fda4adadda6adfa6f4677777776d666d544d4545455454056dd5dd55535454555455545455a5d4555454d5ada4dadadada6464
ffa64fa6a6aeadaadaf464adad4adfdadaadadfa64557777777766dd66d5555d54554550d66dddd5ddd154555455454555455595a5a5a5a5454dadadadadadad
adfaf469d9dadad4ad969dad4a64a4ad9dfafa455001777777776f66666654545d4d505f776666ddddd5005455455454545455555454d45ada5ad4dadadadada
eaadaf96a6adadafdadada4fad4fdadaf45555110105777777776666666666d54554d677766666d6d56d1005545455554555545445a54d4544d4daadadadadad
a6ea6a6aeaeaeaf4ada4dadad4ad9da455551111010d777777777766d66666d54d55677776666d6d6dd6501005554545545454545455a5adadada4dadadadad4
faa69f4fadadad4fdadfadad9fda4d5111115150501d77777ff7766666d66d56d466d5677766666d6d66d1011055555455554545a54454545454da64f4adadad
fdae6af4fadadaf9f4a4f4f4694d55555110501100567777f4e6d666666666d6d5666d1d777666666d6d75005000155554555455545a5adadada54adad64dada
aada9da6adaeada4dada4a4aa555555515150150111d777e9e94f6d6666d67664d666d515776666d6af6661001515101154545445a5545454545addada96adad
fdafdada4f464f46a4f46dad115555115101050106dd7774e9efe96666dd6776d5666d55057766666eeeff5011010153505455554554545a5ada4dadaddad4d4
4ad4adadada4ada4dada4ad555351151050501010ddd777e949eeef66dddd776d4766d55103776666f9f9fd000151510055544455445a5a54d456adad4ad4ada
f4a64adad9dad4da4d4dad415d11551501101050112167fe99e99e66d5655677dd767655130167666ee9ef610100101105d5555955545454a5a44dadad4ad4ad
4ad4ad9d4ad44a4d44a4445d66d111115050101016d1d7f9ee4ee67e056656776d767d5550302d776eae9ef5001013101555535395a545a5d4dad9d45addadd4
ad4ad4d4ad9dad45a4554566666d010501010100d6d117ee49e967d440165d77d6767d5d533542567f4ee9f600001010515455dd54545ad5a5a5ad4da45a45a4
44a54444545454a545a5576d6d6d5011050100101121067fe49ef6488400dd7766667dd513532200d7ffffef101051011542444d6545a54adadd4da5dda5da5d
d555555555554554555467f66dddd101101010001dd14467fef760288400057766767d5003308422056666d500001110552554446645dad5d4a5a5da45d45545
5555555555555555555d7f996dddd51100050010d6dd90d766765504482000566dd5100005354059411d50000010010152545445d66a45a4a5555a555a5a5a54
db55b55b5555b555555777f95dd5d5000100010021d2044677600500848000005000000043330224211210000100100555244255d6665a5d555a555a55555555
54d5555555b5555b55677fa494d5dd501001001002d14a247605a45088840001110002284031550401dd100010010015112245555d6665d45a5554555a54da5a
db5555555555555555777f9949dd5d500100500026dd442530044350044880015110084803300544411dd00001001055550555355dd66d4b455455a555555555
d4bd5b55b55553553777769eddddddd100000020dd1d04403330045002989880222884885353502441d200000010005d55515dd355dd665454555555455a5545
5555555555535553d776666d66dd4565000202000dd12a44d6305a4500248e98888882840335554001dd1001010100144d55156d55d6d6d5555a5554b5555555
5555b55555355535f77667666dd6dd650000000026ddd924033055550000288498488000b530524402dd1000000000544455156655dddd6555b5555554555555
5b5555353555355577776dd666946dd6100202001d1d10440db1004a50000002422020003355024401d1000010100044444551676556ddd5b4455b455b455555
555555555535553d77766d366e999dd65000002001d2049446d300a45100000000000001303455401ddd002000000044444555d76556656d55b554b554b4b555
d55b53553555350677667767d94949ddd0002000027d149040330030991000011511000d5350044411dd000010100054445555577d56d56d5555555555554555
5bd555535535553677776774949ae99dd10000020dddd04440dd3004a550000150100103335052420d21002000000014455535566d5665dd5353535353553555
d5555b5555535356776777d499999eddd00000000011104944bd31015145000015010553300024401dd1000020000015455351567d566d5d5535355535355353
555b55535355505777777ddd9eae946515000202001d61440403530005a91001110550535300049011d20200000000515555351d7d5d6d5d5353553353553555
5b555555555353d77777ddddf9e996d5550000000006dd144403631005435950550a9503310042012d10000020010055dd15551676d6655d5535535535535533
5d5b5b53535550d7777dddd66ddd65555510000020121d19a42333310000aa55a4543033000444211dd000200000015d5651551d76d6d5555535353553353355
5b555555553535d77765ddd6d6d65555555001000000dd1442400db30000555555505d35300049212dd0200020000154d6d5551d666665555353535355535535
555b55b53553506776dddd6ddddd51555551011101016dd0049406d53100000005003d33500520011210000000000555dd651555666665155555355353355353
db555b55553553676dddd66ddd355555555500101005dd200a44500bd30000001005b0300044401dd10000000000055ddd661515666d65155533553535553535
555b555b535535676ddd66dddb5555555151000110110dd102425006b35310010333db50005294126d0010000010015dddd6511566d665155355335353353553
5b455b5555b535776ddd6dddd55555d555511000011016dd20094900136b353053530d1004202011d100001000000515dd66651566dd65155535553555535355
555b5555b55556776dd666dd55555d55510150000000261d104a2440053536536d33000009940dd21001001100000115ddd66551d6d67d055353535353355353
55b54b5b555b5777ddd6ddd55555d5511055500001000d2d2105494000003d330351000044440dd6d00001100000015056d6651066dd76155535355535553535
5b4db5555b5567776d6ddd55555d551515555100000100d6dd009444000000300000001444005d1d1110110000100501d65d6d51d6dd66515355533535335355
5db555bd55b57777d6666d55555d555505555100110010dddd005244400000015000005944006d200011100000001151ddd66610d6d567515533555353553535
b55db555b55677766d6dd51555d5d5555555550010110011dd1000a944000000010054422501ddd000000000000005056dddd650d66dd7d15555353535535553
5db555db55567777d666601d5d5ddd555d5551000111000d7dd00044494000001000994400dd1dd00001000010005505dd5dd651d6d5d6d1555b535355355335
d5dabdb4dbd7777666d650555dddd5d5d5555500000000056ddd00009f4440045444444500ddd1000000001000005105ddddd650dfd5d66555b55b55b55b5555
5b55d5db45677776d666501dd55d6d6d555115000010000011d6210044299499499440005d1dd1010001010000005105d5d5d650d6d5d665555b55b55b55b5b5
5ddb4b5d53677776666d500dddd66d655510150000010000016dd200000944444244000d6d2110001100111000005505dd5dd651d6d5d6655555b54b55b55555
b4bd5dd5b5677776666d015d6dd6d6d5550555000000000000dd1dd0000045050000011dddd000000111100000015105d55dd6506655d66d553555355b555b53
d5d5b5b4d56777766665151d6d666d555105510000010010000116dd0000000000000d611d1000000010100001055015d5ddd6516d55d66d5555b555555b5555
5b5d4d5b5bf7777d6665051d6d6d6d5551155500000010000000d7dd2d101000001d1ded100000100001000000055105d55dd6506655d66d55555b5b5b55b5b5
5d5b5b5d557777666665155d66666d55151515000000000000001d216d2d6d15d16621dd000100000000000000055015d5d5dd516d55d66d555bd5555555d5d5
dbd5d5d5b577776666d5555d6dd6dd555051551000000000100000016dd6ddd66dddd100000000000010001000551055555ddd516d15666655bd55bdbdb5b5b5
555b4b5b4d77777666d5515dd66665551515510000100010000000001212dd2ddd11210000000000100000000055111555d56d516555666d5555b5d5555d55d5
5d5d5d5dbd7777766751555d6d6dd555115155100000000000000000010011011100000001000100000010000155105d55dd6d05650d666d555d5b5b5b5b5b55
